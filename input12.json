{
  "version": "1.0",
  "project_root": "modular-framework",
  "dry_run": false,
  "backup": true,
  "changes": [
    {
      "id": "api-import-joinRemotePath",
      "description": "Import joinRemotePath helper for consistent remote path composition.",
      "op": "patch_text",
      "path": "modules/llm-ide/src/services/api.js",
      "patches": [
        {
          "type": "insert_after",
          "anchor": "import { addToTerminal } from '../terminal/index.js';",
          "replacement": "\nimport { joinRemotePath } from '../utils/remotePath.js';\n"
        }
      ]
    },
    {
      "id": "api-fetchRemoteTree-fix-baseurl-and-join",
      "description": "Fix fetchRemoteTree to use relative URL (keeps /ide/api prefix), join remoteRoot with requested path, add debug logging, and safer default depth.",
      "op": "patch_text",
      "path": "modules/llm-ide/src/services/api.js",
      "patches": [
        {
          "type": "replace_regex",
          "match": "export\\s+async\\s+function\\s+fetchRemoteTree\\s*\\(\\s*remotePath\\s*,\\s*depth\\s*=\\s*10\\s*\\)",
          "replacement": "export async function fetchRemoteTree(remotePath, depth = 2)"
        },
        {
          "type": "replace_regex",
          "match": "const url = new URL\\('\\/ssh\\/list',\\s*BACKEND_HTTP\\);[\\s\\S]*?url\\.searchParams\\.append\\('depth',\\s*String\\(depth\\)\\);",
          "replacement": "const url = new URL('ssh/list', BACKEND_HTTP);\n  url.searchParams.append('sessionId', activeSessionId);\n  const targetPath = joinRemotePath(state.remoteRoot || '/', remotePath || '/');\n  console.debug('[API] list', { session: activeSessionId, remoteRoot: state.remoteRoot, requested: remotePath, targetPath, depth });\n  url.searchParams.append('path', targetPath);\n  url.searchParams.append('depth', String(depth));"
        }
      ]
    },
    {
      "id": "api-readRemoteFile-fix-baseurl-join-and-logging",
      "description": "Fix readRemoteFile to keep /ide/api prefix (no leading slash), use joinRemotePath, and add logging/content-type guard for clearer errors.",
      "op": "patch_text",
      "path": "modules/llm-ide/src/services/api.js",
      "patches": [
        {
          "type": "replace_regex",
          "match": "const base = \\(state\\.remoteRoot \\|\\| ''\\)\\.replace\\(/\\$/, ''\\);\\s*const fullPath = base \\+ \\(relPath\\.startsWith\\('/'\\) \\? relPath : '/' \\+ relPath\\);",
          "replacement": "const fullPath = joinRemotePath(state.remoteRoot || '/', relPath);\n  console.debug('[API] read', { session: activeSessionId, relPath, fullPath });"
        },
        {
          "type": "replace_regex",
          "match": "const url = new URL\\('\\/ssh\\/read',\\s*BACKEND_HTTP\\);",
          "replacement": "const url = new URL('ssh/read', BACKEND_HTTP);"
        },
        {
          "type": "insert_after",
          "anchor": "const res = await fetch(url.toString());",
          "replacement": "\n    const ct = res.headers.get('content-type') || '';\n"
        },
        {
          "type": "replace_regex",
          "match": "if \\(!res\\.ok\\) \\{[\\s\\S]*?\\}",
          "replacement": "if (!res.ok) {\n      const text = await res.text().catch(() => '');\n      throw new Error(text || `HTTP ${res.status}`);\n    }\n    if (!ct.includes('application/json')) {\n      const text = await res.text().catch(() => '');\n      throw new Error(`Non-JSON response (${res.status}) @ ${url.pathname}: ${text.slice(0,160)}`);\n    }"
        },
        {
          "type": "insert_after",
          "anchor": "if (!data.ok) throw new Error(data.error || 'Read failed');",
          "replacement": "\n    console.debug('[API] read:ok', { fullPath, bytes: (data.content || '').length });\n"
        },
        {
          "type": "replace_regex",
          "match": "console\\.error\\('readRemoteFile error:',\\s*e\\);",
          "replacement": "console.error('readRemoteFile error:', { fullPath, err: e?.message || e });"
        }
      ]
    },
    {
      "id": "api-writeRemoteFile-join-and-log",
      "description": "Use joinRemotePath for write path and add debug logging (base URL usage already correct).",
      "op": "patch_text",
      "path": "modules/llm-ide/src/services/api.js",
      "patches": [
        {
          "type": "replace_regex",
          "match": "const base = \\(state\\.remoteRoot \\|\\| ''\\)\\.replace\\(/\\$/, ''\\);\\s*const fullPath = base \\+ \\(relPath\\.startsWith\\('/'\\) \\? relPath : '/' \\+ relPath\\);",
          "replacement": "const fullPath = joinRemotePath(state.remoteRoot || '/', relPath);\n  console.debug('[API] write', { session: activeSessionId, relPath, fullPath, bytes: (content || '').length });"
        }
      ]
    },
    {
      "id": "api-makeRemoteDir-join-and-log",
      "description": "Use joinRemotePath for mkdir path and add debug logging (base URL usage already correct).",
      "op": "patch_text",
      "path": "modules/llm-ide/src/services/api.js",
      "patches": [
        {
          "type": "replace_regex",
          "match": "const base = \\(state\\.remoteRoot \\|\\| ''\\)\\.replace\\(/\\$/, ''\\);\\s*const fullPath = base \\+ \\(relPath\\.startsWith\\('/'\\) \\? relPath : '/' \\+ relPath\\);",
          "replacement": "const fullPath = joinRemotePath(state.remoteRoot || '/', relPath);\n  console.debug('[API] mkdir', { session: activeSessionId, relPath, fullPath, recursive });"
        }
      ]
    },
    {
      "id": "backend-list-read-logging",
      "description": "Add backend logging for /ssh/list and /ssh/read to correlate requests.",
      "op": "patch_text",
      "path": "modules/llm-ide/backend/server.js",
      "patches": [
        {
          "type": "insert_after",
          "anchor": "const depth = Math.max(0, Math.min(5, parseInt(req.query.depth || '2', 10)));",
          "replacement": "\n    console.log('[api] /ssh/list', { sessionId, path, depth });\n"
        },
        {
          "type": "insert_after",
          "anchor": "const path = req.query.path;",
          "replacement": "\n    console.log('[api] /ssh/read', { sessionId, path });\n"
        }
      ]
    },
    {
      "id": "filetree-ensure-import-joinRemotePath-optional",
      "description": "Optional: ensure file tree expansion logs absolute path being expanded (safe even if API joins).",
      "op": "patch_text",
      "path": "modules/llm-ide/src/ui/fileTree.js",
      "patches": [
        {
          "type": "insert_after",
          "anchor": "import { getFileIcon } from '../utils/path.js';",
          "replacement": "\nimport { joinRemotePath } from '../utils/remotePath.js';\n"
        },
        {
          "type": "replace_regex",
          "match": "const tree = await API\\.fetchRemoteTree\\(fullPath,\\s*1\\)\\.catch\\(\\(\\)=> \\(\\{\\}\\)\\);",
          "replacement": "const abs = joinRemotePath(state.remoteRoot || '/', fullPath);\n      console.debug('[Tree] expand', { fullPath, abs });\n      const tree = await API.fetchRemoteTree(abs, 1).catch(() => ({}));"
        }
      ]
    }
  ]
}