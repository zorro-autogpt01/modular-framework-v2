{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/code-change-plan.schema.json",
  "title": "CodeChangePlan",
  "type": "object",
  "version": "1.0",
  "project_root": ".",
  "dry_run": false,
  "backup": true,
  "changes": [
    {
      "id": "write-index-html",
      "description": "Create main HTML shell for Web Code Editor",
      "op": "write_file",
      "path": "index.html",
      "mode": "overwrite",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Code Editor</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: #1e1e1e;\n            color: #cccccc;\n            height: 100vh;\n            overflow: hidden;\n        }\n\n        .editor-container {\n            display: flex;\n            height: 100vh;\n        }\n\n        .sidebar {\n            width: 250px;\n            background: #252526;\n            border-right: 1px solid #3e3e3e;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .sidebar-header {\n            padding: 10px;\n            background: #2d2d30;\n            border-bottom: 1px solid #3e3e3e;\n            font-weight: bold;\n            text-transform: uppercase;\n            font-size: 11px;\n            letter-spacing: 0.5px;\n        }\n\n        .file-tree {\n            flex: 1;\n            overflow-y: auto;\n            padding: 8px 0;\n        }\n\n        .file-item, .folder-item {\n            padding: 4px 12px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            font-size: 13px;\n            transition: background 0.1s;\n        }\n\n        .file-item:hover, .folder-item:hover {\n            background: #2a2d2e;\n        }\n\n        .file-item.active {\n            background: #094771;\n            color: #ffffff;\n        }\n\n        .folder-item {\n            font-weight: 500;\n        }\n\n        .folder-item.expanded > .folder-icon::before {\n            content: 'üìÇ';\n        }\n\n        .folder-item.collapsed > .folder-icon::before {\n            content: 'üìÅ';\n        }\n\n        .file-icon::before {\n            content: 'üìÑ';\n            margin-right: 6px;\n            font-size: 12px;\n        }\n\n        .folder-icon::before {\n            margin-right: 6px;\n            font-size: 12px;\n        }\n\n        .folder-children {\n            margin-left: 16px;\n        }\n\n        .folder-children.hidden {\n            display: none;\n        }\n\n        .main-content {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .tabs-container {\n            background: #2d2d30;\n            border-bottom: 1px solid #3e3e3e;\n            display: flex;\n            overflow-x: auto;\n            min-height: 35px;\n        }\n\n        .tab {\n            padding: 8px 16px;\n            background: #2d2d30;\n            border-right: 1px solid #3e3e3e;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            font-size: 13px;\n            white-space: nowrap;\n            position: relative;\n        }\n\n        .tab.active {\n            background: #1e1e1e;\n            color: #ffffff;\n        }\n\n        .tab:hover:not(.active) {\n            background: #383838;\n        }\n\n        .tab-close {\n            margin-left: 8px;\n            opacity: 0.6;\n            cursor: pointer;\n            width: 16px;\n            height: 16px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            border-radius: 2px;\n        }\n\n        .tab-close:hover {\n            opacity: 1;\n            background: #e81123;\n        }\n\n        .editor-area {\n            flex: 1;\n            position: relative;\n        }\n\n        .toolbar {\n            background: #2d2d30;\n            padding: 8px 12px;\n            border-bottom: 1px solid #3e3e3e;\n            display: flex;\n            gap: 8px;\n            align-items: center;\n        }\n\n        .btn {\n            padding: 6px 12px;\n            background: #0e639c;\n            color: white;\n            border: none;\n            border-radius: 2px;\n            cursor: pointer;\n            font-size: 12px;\n            transition: background 0.2s;\n        }\n\n        .btn:hover {\n            background: #1177bb;\n        }\n\n        .btn.secondary {\n            background: #5a5a5a;\n        }\n\n        .btn.secondary:hover {\n            background: #6e6e6e;\n        }\n\n        .api-panel {\n            position: fixed;\n            top: 10px;\n            right: 10px;\n            background: #252526;\n            border: 1px solid #3e3e3e;\n            border-radius: 4px;\n            padding: 16px;\n            max-width: 300px;\n            z-index: 1000;\n        }\n\n        .api-panel h3 {\n            margin-bottom: 12px;\n            font-size: 14px;\n            color: #ffffff;\n        }\n\n        .api-endpoint {\n            margin-bottom: 8px;\n            padding: 8px;\n            background: #1e1e1e;\n            border-radius: 2px;\n            font-family: 'Courier New', monospace;\n            font-size: 11px;\n            border-left: 3px solid #0e639c;\n        }\n\n        .status-bar {\n            background: #007acc;\n            color: white;\n            padding: 4px 12px;\n            font-size: 12px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .diff-container {\n            height: 100%;\n            width: 100%;\n        }\n\n        #monaco-editor, #monaco-diff {\n            height: 100%;\n            width: 100%;\n        }\n\n        .context-menu {\n            position: fixed;\n            background: #383838;\n            border: 1px solid #5a5a5a;\n            border-radius: 3px;\n            padding: 4px 0;\n            z-index: 1001;\n            font-size: 13px;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.3);\n        }\n\n        .context-menu-item {\n            padding: 6px 16px;\n            cursor: pointer;\n        }\n\n        .context-menu-item:hover {\n            background: #094771;\n        }\n\n        .hidden { display: none !important; }\n    </style>\n</head>\n<body>\n    <div class=\"editor-container\">\n        <div class=\"sidebar\">\n            <div class=\"sidebar-header\">Explorer</div>\n            <div class=\"file-tree\" id=\"fileTree\">\n                <!-- File tree will be populated by JavaScript -->\n            </div>\n        </div>\n\n        <div class=\"main-content\">\n            <div class=\"toolbar\">\n                <button class=\"btn\" onclick=\"saveCurrentFile()\">Save</button>\n                <button class=\"btn secondary\" onclick=\"saveAllFiles()\">Save All</button>\n                <button class=\"btn secondary\" onclick=\"showDiff()\">Show Diff</button>\n                <button class=\"btn secondary\" onclick=\"formatDocument()\">Format</button>\n                <button class=\"btn secondary\" onclick=\"newFile()\">New File</button>\n            </div>\n            \n            <div class=\"tabs-container\" id=\"tabsContainer\">\n                <!-- Tabs will be populated by JavaScript -->\n            </div>\n\n            <div class=\"editor-area\">\n                <div id=\"monaco-editor\"></div>\n                <div id=\"monaco-diff\" class=\"hidden\"></div>\n            </div>\n\n            <div class=\"status-bar\">\n                <span id=\"statusLeft\">Ready</span>\n                <span id=\"statusRight\">Line 1, Column 1</span>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"api-panel\">\n        <h3>API Endpoints</h3>\n        <div class=\"api-endpoint\">POST /api/files/content<br>Send content to editor</div>\n        <div class=\"api-endpoint\">GET /api/files/{path}<br>Get file content</div>\n        <div class=\"api-endpoint\">PUT /api/files/{path}<br>Save file content</div>\n        <div class=\"api-endpoint\">DELETE /api/files/{path}<br>Delete file</div>\n        <div class=\"api-endpoint\">GET /api/files/tree<br>Get file tree</div>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js\"></script>\n    <script>\n        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });\n\n        let editor = null;\n        let diffEditor = null;\n        let openFiles = new Map();\n        let activeFile = null;\n        let fileTree = {\n            'src': {\n                type: 'folder',\n                children: {\n                    'components': {\n                        type: 'folder',\n                        children: {\n                            'App.js': { type: 'file', content: '// React App Component\\nimport React from \\'react\\';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Hello World</h1>\\n    </div>\\n  );\\n}\\n\\nexport default App;' },\n                            'Header.js': { type: 'file', content: '// Header Component\\nimport React from \\'react\\';\\n\\nconst Header = () => {\\n  return (\\n    <header>\\n      <h1>My App</h1>\\n    </header>\\n  );\\n};\\n\\nexport default Header;' }\n                        }\n                    },\n                    'utils': {\n                        type: 'folder',\n                        children: {\n                            'helpers.js': { type: 'file', content: '// Utility functions\\nexport const formatDate = (date) => {\\n  return new Intl.DateTimeFormat(\\'en-US\\').format(date);\\n};\\n\\nexport const debounce = (func, wait) => {\\n  let timeout;\\n  return function executedFunction(...args) {\\n    const later = () => {\\n      clearTimeout(timeout);\\n      func(...args);\\n    };\\n    clearTimeout(timeout);\\n    timeout = setTimeout(later, wait);\\n  };\\n};' }\n                        }\n                    },\n                    'index.js': { type: 'file', content: '// Entry point\\nimport React from \\'react\\';\\nimport ReactDOM from \\'react-dom\\';\\nimport App from \\'./components/App\\';\\nimport \\'./styles.css\\';\\n\\nReactDOM.render(<App />, document.getElementById(\\'root\\'));' },\n                    'styles.css': { type: 'file', content: '/* Global styles */\\nbody {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', \\'Roboto\\', sans-serif;\\n  background-color: #f5f5f5;\\n}\\n\\n.App {\\n  text-align: center;\\n  padding: 20px;\\n}\\n\\nh1 {\\n  color: #333;\\n  margin-bottom: 20px;\\n}' }\n                }\n            },\n            'package.json': { type: 'file', content: '{\\n  \"name\": \"web-code-editor-demo\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"Demo project for web code editor\",\\n  \"main\": \"src/index.js\",\\n  \"dependencies\": {\\n    \"react\": \"^18.0.0\",\\n    \"react-dom\": \"^18.0.0\"\\n  },\\n  \"scripts\": {\\n    \"start\": \"react-scripts start\",\\n    \"build\": \"react-scripts build\",\\n    \"test\": \"react-scripts test\"\\n  }\\n}' },\n            'README.md': { type: 'file', content: '# Web Code Editor Demo\\n\\nThis is a demonstration of a web-based code editor with the following features:\\n\\n## Features\\n\\n- File tree navigation\\n- Multiple file tabs\\n- Monaco Editor with IntelliSense\\n- API integration for file operations\\n- Diff view capabilities\\n- Save functionality\\n- Syntax highlighting\\n- Auto-completion\\n\\n## API Endpoints\\n\\nThe editor supports various API operations for remote file management and content manipulation.\\n\\n## Usage\\n\\n1. Navigate files using the tree on the left\\n2. Open multiple files in tabs\\n3. Edit with full IDE features\\n4. Save individual files or all at once\\n5. View diffs between files\\n\\nEnjoy coding!' }\n        };\n\n        require(['vs/editor/editor.main'], function () {\n            // Initialize Monaco Editor\n            editor = monaco.editor.create(document.getElementById('monaco-editor'), {\n                value: '',\n                language: 'javascript',\n                theme: 'vs-dark',\n                automaticLayout: true,\n                minimap: { enabled: true },\n                scrollBeyondLastLine: false,\n                fontSize: 14,\n                lineNumbers: 'on',\n                roundedSelection: false,\n                scrollbar: {\n                    alwaysConsumeMouseWheel: false\n                },\n                cursorBlinking: 'blink',\n                cursorSmoothCaretAnimation: true,\n                contextmenu: true,\n                quickSuggestions: true,\n                suggestOnTriggerCharacters: true\n            });\n\n            // Initialize Diff Editor\n            diffEditor = monaco.editor.createDiffEditor(document.getElementById('monaco-diff'), {\n                theme: 'vs-dark',\n                automaticLayout: true,\n                readOnly: true\n            });\n\n            // Update status bar on cursor position change\n            editor.onDidChangeCursorPosition((e) => {\n                document.getElementById('statusRight').textContent = \n                    `Line ${e.position.lineNumber}, Column ${e.position.column}`;\n            });\n\n            // Track content changes\n            editor.onDidChangeModelContent(() => {\n                if (activeFile) {\n                    markFileAsModified(activeFile);\n                    updateStatus('Modified');\n                }\n            });\n\n            // Initialize file tree and open a default file\n            renderFileTree();\n            openFile('README.md');\n        });\n\n        // API Simulation Functions\n        const API = {\n            async sendContent(filePath, content) {\n                console.log(`API: Sending content to ${filePath}`, content);\n                // Simulate API call\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        updateStatus(`Content sent to ${filePath}`);\n                        resolve({ success: true });\n                    }, 300);\n                });\n            },\n\n            async getFile(filePath) {\n                console.log(`API: Getting file ${filePath}`);\n                const file = getFileFromPath(filePath);\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve({ content: file ? file.content : '' });\n                    }, 200);\n                });\n            },\n\n            async saveFile(filePath, content) {\n                console.log(`API: Saving file ${filePath}`, content);\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        const file = getFileFromPath(filePath);\n                        if (file) {\n                            file.content = content;\n                        }\n                        updateStatus(`Saved ${filePath}`);\n                        resolve({ success: true });\n                    }, 400);\n                });\n            },\n\n            async deleteFile(filePath) {\n                console.log(`API: Deleting file ${filePath}`);\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        // Implementation would delete from tree\n                        updateStatus(`Deleted ${filePath}`);\n                        resolve({ success: true });\n                    }, 300);\n                });\n            },\n\n            async getFileTree() {\n                console.log('API: Getting file tree');\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        resolve(fileTree);\n                    }, 200);\n                });\n            }\n        };\n\n        function getFileFromPath(path) {\n            const parts = path.split('/').filter(p => p);\n            let current = fileTree;\n            \n            for (const part of parts) {\n                if (current[part]) {\n                    if (current[part].type === 'folder') {\n                        current = current[part].children;\n                    } else {\n                        return current[part];\n                    }\n                } else {\n                    return null;\n                }\n            }\n            return current;\n        }\n\n        function renderFileTree() {\n            const container = document.getElementById('fileTree');\n            container.innerHTML = '';\n            renderTreeNode(fileTree, container, '');\n        }\n\n        function renderTreeNode(node, container, path) {\n            for (const [name, item] of Object.entries(node)) {\n                const fullPath = path ? `${path}/${name}` : name;\n                \n                if (item.type === 'folder') {\n                    const folderDiv = document.createElement('div');\n                    folderDiv.className = 'folder-item expanded';\n                    folderDiv.innerHTML = `<span class=\"folder-icon\"></span>${name}`;\n                    \n                    const childrenDiv = document.createElement('div');\n                    childrenDiv.className = 'folder-children';\n                    \n                    folderDiv.addEventListener('click', (e) => {\n                        e.stopPropagation();\n                        folderDiv.classList.toggle('expanded');\n                        folderDiv.classList.toggle('collapsed');\n                        childrenDiv.classList.toggle('hidden');\n                    });\n                    \n                    container.appendChild(folderDiv);\n                    container.appendChild(childrenDiv);\n                    \n                    renderTreeNode(item.children, childrenDiv, fullPath);\n                } else {\n                    const fileDiv = document.createElement('div');\n                    fileDiv.className = 'file-item';\n                    fileDiv.innerHTML = `<span class=\"file-icon\"></span>${name}`;\n                    fileDiv.addEventListener('click', () => openFile(fullPath));\n                    \n                    // Add context menu\n                    fileDiv.addEventListener('contextmenu', (e) => {\n                        e.preventDefault();\n                        showContextMenu(e, fullPath);\n                    });\n                    \n                    container.appendChild(fileDiv);\n                }\n            }\n        }\n\n        function openFile(filePath) {\n            const file = getFileFromPath(filePath);\n            if (!file || file.type !== 'file') return;\n\n            // Add to open files if not already open\n            if (!openFiles.has(filePath)) {\n                openFiles.set(filePath, {\n                    content: file.content,\n                    originalContent: file.content,\n                    modified: false\n                });\n            }\n\n            activeFile = filePath;\n            updateTabs();\n            loadFileInEditor(filePath);\n            updateFileTreeSelection();\n        }\n\n        function loadFileInEditor(filePath) {\n            const fileData = openFiles.get(filePath);\n            if (!fileData) return;\n\n            const language = getLanguageFromPath(filePath);\n            \n            // Hide diff editor and show main editor\n            document.getElementById('monaco-diff').classList.add('hidden');\n            document.getElementById('monaco-editor').classList.remove('hidden');\n\n            const model = monaco.editor.createModel(fileData.content, language);\n            editor.setModel(model);\n            \n            updateStatus(`Opened ${filePath}`);\n        }\n\n        function getLanguageFromPath(filePath) {\n            const ext = filePath.split('.').pop().toLowerCase();\n            const languageMap = {\n                'js': 'javascript',\n                'jsx': 'javascript',\n                'ts': 'typescript',\n                'tsx': 'typescript',\n                'html': 'html',\n                'css': 'css',\n                'scss': 'scss',\n                'json': 'json',\n                'md': 'markdown',\n                'py': 'python',\n                'java': 'java',\n                'cpp': 'cpp',\n                'c': 'c',\n                'xml': 'xml',\n                'yml': 'yaml',\n                'yaml': 'yaml'\n            };\n            return languageMap[ext] || 'plaintext';\n        }\n\n        function updateTabs() {\n            const container = document.getElementById('tabsContainer');\n            container.innerHTML = '';\n\n            for (const [filePath, fileData] of openFiles) {\n                const tab = document.createElement('div');\n                tab.className = `tab ${filePath === activeFile ? 'active' : ''}`;\n                \n                const fileName = filePath.split('/').pop();\n                const modifiedIndicator = fileData.modified ? ' ‚óè' : '';\n                \n                tab.innerHTML = `\n                    <span>${fileName}${modifiedIndicator}</span>\n                    <span class=\"tab-close\">√ó</span>\n                `;\n                \n                tab.addEventListener('click', (e) => {\n                    if (e.target.classList.contains('tab-close')) {\n                        e.stopPropagation();\n                        closeFile(filePath);\n                    } else {\n                        switchToFile(filePath);\n                    }\n                });\n                \n                container.appendChild(tab);\n            }\n        }\n\n        function switchToFile(filePath) {\n            activeFile = filePath;\n            updateTabs();\n            loadFileInEditor(filePath);\n            updateFileTreeSelection();\n        }\n\n        function closeFile(filePath) {\n            if (openFiles.get(filePath)?.modified) {\n                if (!confirm(`File ${filePath} has unsaved changes. Close anyway?`)) {\n                    return;\n                }\n            }\n\n            openFiles.delete(filePath);\n            \n            if (activeFile === filePath) {\n                const remaining = Array.from(openFiles.keys());\n                if (remaining.length > 0) {\n                    switchToFile(remaining[remaining.length - 1]);\n                } else {\n                    activeFile = null;\n                    editor.setModel(null);\n                }\n            }\n            \n            updateTabs();\n            updateFileTreeSelection();\n        }\n\n        function markFileAsModified(filePath) {\n            const fileData = openFiles.get(filePath);\n            if (fileData) {\n                const currentContent = editor.getValue();\n                fileData.content = currentContent;\n                fileData.modified = currentContent !== fileData.originalContent;\n                updateTabs();\n            }\n        }\n\n        function updateFileTreeSelection() {\n            document.querySelectorAll('.file-item').forEach(item => {\n                item.classList.remove('active');\n                if (activeFile && item.textContent.trim().endsWith(activeFile.split('/').pop())) {\n                    item.classList.add('active');\n                }\n            });\n        }\n\n        async function saveCurrentFile() {\n            if (!activeFile) return;\n            \n            const content = editor.getValue();\n            await API.saveFile(activeFile, content);\n            \n            const fileData = openFiles.get(activeFile);\n            if (fileData) {\n                fileData.originalContent = content;\n                fileData.modified = false;\n                updateTabs();\n            }\n        }\n\n        async function saveAllFiles() {\n            for (const [filePath, fileData] of openFiles) {\n                if (fileData.modified) {\n                    await API.saveFile(filePath, fileData.content);\n                    fileData.originalContent = fileData.content;\n                    fileData.modified = false;\n                }\n            }\n            updateTabs();\n            updateStatus('All files saved');\n        }\n\n        function showDiff() {\n            if (!activeFile) return;\n            \n            const fileData = openFiles.get(activeFile);\n            if (!fileData) return;\n\n            document.getElementById('monaco-editor').classList.add('hidden');\n            document.getElementById('monaco-diff').classList.remove('hidden');\n\n            const language = getLanguageFromPath(activeFile);\n            const originalModel = monaco.editor.createModel(fileData.originalContent, language);\n            const modifiedModel = monaco.editor.createModel(fileData.content, language);\n\n            diffEditor.setModel({\n                original: originalModel,\n                modified: modifiedModel\n            });\n\n            updateStatus('Showing diff view');\n        }\n\n        function formatDocument() {\n            if (editor && activeFile) {\n                editor.getAction('editor.action.formatDocument').run();\n                updateStatus('Document formatted');\n            }\n        }\n\n        function newFile() {\n            const fileName = prompt('Enter file name:', 'newfile.js');\n            if (!fileName) return;\n\n            const content = `// New file: ${fileName}\\n\\n`;\n            \n            // Add to file tree (simplified - in real app would use API)\n            fileTree[fileName] = { type: 'file', content: content };\n            \n            openFiles.set(fileName, {\n                content: content,\n                originalContent: '',\n                modified: true\n            });\n\n            activeFile = fileName;\n            renderFileTree();\n            updateTabs();\n            loadFileInEditor(fileName);\n            updateStatus(`Created ${fileName}`);\n        }\n\n        function showContextMenu(event, filePath) {\n            const menu = document.createElement('div');\n            menu.className = 'context-menu';\n            menu.style.left = event.pageX + 'px';\n            menu.style.top = event.pageY + 'px';\n\n            menu.innerHTML = `\n                <div class=\"context-menu-item\" onclick=\"openFile('${filePath}')\">Open</div>\n                <div class=\"context-menu-item\" onclick=\"renameFile('${filePath}')\">Rename</div>\n                <div class=\"context-menu-item\" onclick=\"deleteFileFromTree('${filePath}')\">Delete</div>\n                <div class=\"context-menu-item\" onclick=\"copyFilePath('${filePath}')\">Copy Path</div>\n            `;\n\n            document.body.appendChild(menu);\n\n            // Remove menu on click outside\n            setTimeout(() => {\n                document.addEventListener('click', function removeMenu() {\n                    menu.remove();\n                    document.removeEventListener('click', removeMenu);\n                });\n            }, 10);\n        }\n\n        function renameFile(filePath) {\n            const newName = prompt('Enter new name:', filePath.split('/').pop());\n            if (newName && newName !== filePath.split('/').pop()) {\n                // Implementation would handle renaming\n                updateStatus(`Renamed to ${newName}`);\n            }\n        }\n\n        function deleteFileFromTree(filePath) {\n            if (confirm(`Delete ${filePath}?`)) {\n                API.deleteFile(filePath);\n                // Remove from tree and close if open\n                if (openFiles.has(filePath)) {\n                    closeFile(filePath);\n                }\n            }\n        }\n\n        function copyFilePath(filePath) {\n            navigator.clipboard.writeText(filePath);\n            updateStatus(`Copied path: ${filePath}`);\n        }\n\n        function updateStatus(message) {\n            document.getElementById('statusLeft').textContent = message;\n            setTimeout(() => {\n                document.getElementById('statusLeft').textContent = 'Ready';\n            }, 3000);\n        }\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                switch (e.key) {\n                    case 's':\n                        e.preventDefault();\n                        if (e.shiftKey) {\n                            saveAllFiles();\n                        } else {\n                            saveCurrentFile();\n                        }\n                        break;\n                    case 'n':\n                        e.preventDefault();\n                        newFile();\n                        break;\n                    case 'w':\n                        e.preventDefault();\n                        if (activeFile) {\n                            closeFile(activeFile);\n                        }\n                        break;\n                }\n            }\n        });\n\n        // Expose API for external use\n        window.CodeEditorAPI = {\n            openFile: (path, content) => {\n                fileTree[path] = { type: 'file', content: content };\n                renderFileTree();\n                openFile(path);\n            },\n            getOpenFiles: () => Array.from(openFiles.keys()),\n            getCurrentFile: () => activeFile,\n            getCurrentContent: () => editor ? editor.getValue() : '',\n            saveFile: saveCurrentFile,\n            saveAllFiles: saveAllFiles,\n            API: API\n        };\n\n        console.log('Code Editor initialized. Use window.CodeEditorAPI for external control.');\n    </script>\n</body>\n</html>\n"
    },
    {
      "id": "write-src-components-app",
      "description": "Create src/components/App.js React component",
      "op": "write_file",
      "path": "src/components/App.js",
      "mode": "overwrite",
      "content": "// React App Component\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello World</h1>\n    </div>\n  );\n}\n\nexport default App;"
    },
    {
      "id": "write-src-components-header",
      "description": "Create src/components/Header.js React component",
      "op": "write_file",
      "path": "src/components/Header.js",
      "mode": "overwrite",
      "content": "// Header Component\nimport React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>My App</h1>\n    </header>\n  );\n};\n\nexport default Header;"
    },
    {
      "id": "write-src-utils-helpers",
      "description": "Create src/utils/helpers.js utilities",
      "op": "write_file",
      "path": "src/utils/helpers.js",
      "mode": "overwrite",
      "content": "// Utility functions\nexport const formatDate = (date) => {\n  return new Intl.DateTimeFormat('en-US').format(date);\n};\n\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};"
    },
    {
      "id": "write-src-index",
      "description": "Create src/index.js entry point",
      "op": "write_file",
      "path": "src/index.js",
      "mode": "overwrite",
      "content": "// Entry point\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"
    },
    {
      "id": "write-src-styles",
      "description": "Create src/styles.css global styles",
      "op": "write_file",
      "path": "src/styles.css",
      "mode": "overwrite",
      "content": "/* Global styles */\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  background-color: #f5f5f5;\n}\n\n.App {\n  text-align: center;\n  padding: 20px;\n}\n\nh1 {\n  color: #333;\n  margin-bottom: 20px;\n}"
    },
    {
      "id": "write-package-json",
      "description": "Create package.json for the demo project",
      "op": "write_file",
      "path": "package.json",
      "mode": "overwrite",
      "content": "{\n  \"name\": \"web-code-editor-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Demo project for web code editor\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\"\n  }\n}"
    },
    {
      "id": "write-readme",
      "description": "Create README.md for the demo project",
      "op": "write_file",
      "path": "README.md",
      "mode": "overwrite",
      "content": "# Web Code Editor Demo\n\nThis is a demonstration of a web-based code editor with the following features:\n\n## Features\n\n- File tree navigation\n- Multiple file tabs\n- Monaco Editor with IntelliSense\n- API integration for file operations\n- Diff view capabilities\n- Save functionality\n- Syntax highlighting\n- Auto-completion\n\n## API Endpoints\n\nThe editor supports various API operations for remote file management and content manipulation.\n\n## Usage\n\n1. Navigate files using the tree on the left\n2. Open multiple files in tabs\n3. Edit with full IDE features\n4. Save individual files or all at once\n5. View diffs between files\n\nEnjoy coding!"
    }
  ]
}