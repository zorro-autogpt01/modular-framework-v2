version: '3.8'

services:
  # Main Framework Container with Nginx
  framework:
    build: ./framework
    container_name: modular-framework
    ports:
      - "8080:80"
    volumes:
      - ./framework/html:/usr/share/nginx/html
      - ./framework/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - rag-api-module
      - github-hub-module
      - llm-chat
      - browser-module
    networks:
      - app-network
    restart: unless-stopped

  # SSH Terminal Module Container
  ssh-terminal:
    build: ./modules/ssh-terminal
    container_name: ssh-terminal-module
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    networks:
      - app-network
    restart: unless-stopped

  llm-workflows-module:
    build: ./modules/llm-workflows
    container_name: llm-workflows-module
    environment:
      - SPLUNK_HEC_URL=$SPLUNK_HEC_URL
      - SPLUNK_HEC_TOKEN=$SPLUNK_HEC_TOKEN
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      - NODE_ENV=production
      - PORT=3005
      # Point to llm-gateway compat endpoint designed for workflows SSE
      - LLM_GATEWAY_CHAT_URL=http://llm-gateway:3010/api/compat/llm-workflows
      # Base for admin/models APIs
      - LLM_GATEWAY_API_BASE=http://llm-gateway:3010/api
      # Optional: serve UI under a path instead of "/"
      - BASE_PATH=/llm-workflows
      # Optional & DANGEROUS: only set to true if you want to allow host execution
      # - ALLOW_DANGEROUS=true
      # Optional: choose where workflows.json is stored (default is /app/data)
      # - DATA_DIR=/app/data
    expose:
      - "3005"
    volumes:
      # persist workflows.json
      - ./modules/llm-workflows/data:/app/data
    depends_on:
      - llm-gateway
      - splunk
    networks:
      - app-network
    restart: unless-stopped

  github-hub-module:
    build:
      context: ./modules/github-hub
    container_name: github-hub-module
    environment:
      - PORT=3005
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GH_TOKEN_KEY=${GH_TOKEN_KEY}
      - DATA_DIR=/data
    volumes:
      - ./modules/github-hub/data:/data
    expose:
      - "3005"
    networks:
      - app-network

  llm-chat:
    build: ./modules/llm-chat
    container_name: llm-chat-module
    ports:
      - "3004:3004"
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      - PORT=3004
      - SPLUNK_HEC_URL=${SPLUNK_HEC_URL}      
      - LOG_TO_CONSOLE=false
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
      - SPLUNK_SOURCE=llm-chat
    depends_on:
      - splunk
    networks:
      - app-network
    restart: unless-stopped

  browser-module:
    build: ./modules/browser
    container_name: browser-module
    environment:
      - PORT=3008
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    expose:
      - "3008"
    networks:
      - app-network
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./modules/RAG/qdrant_storage:/qdrant/storage
    networks:
        - app-network
    environment:
      - QDRANT__LOG_LEVEL=INFO

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
        - app-network
    volumes:
      - ./modules/RAG/redis_data:/data

  rag-api-module:
    build: ./modules/RAG
    container_name: rag-api-module
    env_file: .env
    ports:
      - "8000:8000"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - qdrant
      - redis
    networks:
        - app-network
    volumes:
      - ./modules/RAG/logs:/app/logs

  postgres:
    image: postgres:14-alpine
    container_name: postgres-llm-gateway
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=llm_gateway
    ports:
      - "5432:5432"
    volumes:
      - ./modules/llm-gateway/pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  llm-gateway:
    build: ./modules/llm-gateway
    container_name: llm-gateway
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - LOG_TO_CONSOLE=false
      - PORT=3010
      - BASE_PATH=/llm-gateway
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=llm_gateway
      - SPLUNK_HEC_TOKEN=${SPLUNK_HEC_TOKEN}
      - SPLUNK_HEC_URL=${SPLUNK_HEC_URL}
      - SPLUNK_SOURCE=llm-gateway
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      #- SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
    expose:
      - "3010"
    ports:
      - "3010:3010"
    depends_on:
      - postgres
      - splunk
    networks:
      - app-network
    restart: unless-stopped

  splunk:
    image: splunk/splunk:latest
    container_name: splunk
    env_file: ./splunk/.env
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_GENERAL_TERMS=--accept-sgt-current-at-splunk-com
      # If you prefer, you can set SPLUNK_PASSWORD in .env instead of inline
      #- SPLUNK_PASSWORD=$SPLUNK_PASSWORD
      #- SPLUNK_PASSWORD=test
    ports:
      - "7999:8000"  # Web UI
      - "8088:8088"  # HEC
      - "8089:8089"  # mgmt API
    volumes:
      - ./splunk/var:/opt/splunk/var
      - ./splunk/etc:/opt/splunk/etc
      - ./splunk/hec-app:/opt/splunk/etc/apps/hec
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge