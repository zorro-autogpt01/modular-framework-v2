{
  "version": "1.0",
  "project_root": "",
  "dry_run": false,
  "backup": true,
  "changes": [
    {
      "op": "write_file",
      "path": "modular-framework/modules/splunk-logger/server/index.js",
      "mode": "create_new",
      "content": "const os = require('os');\n\nconst SPLUNK_HEC_URL = process.env.SPLUNK_HEC_URL;\nconst SPLUNK_HEC_TOKEN = process.env.SPLUNK_HEC_TOKEN;\n\nconst configured = !!(SPLUNK_HEC_URL && SPLUNK_HEC_TOKEN);\n\nasync function logEvent(level, msg, meta) {\n  if (!configured) return;\n  const payload = {\n    event: {\n      level,\n      message: typeof msg === 'string' ? msg : JSON.stringify(msg),\n      meta\n    },\n    time: Math.floor(Date.now() / 1000),\n    host: os.hostname(),\n    sourcetype: '_json'\n  };\n  try {\n    await fetch(SPLUNK_HEC_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Splunk ${SPLUNK_HEC_TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n  } catch (e) { /* ignore logging failures */ }\n}\n\nfunction logDebug(msg, meta){ return logEvent('debug', msg, meta); }\nfunction logInfo(msg, meta){ return logEvent('info', msg, meta); }\nfunction logWarn(msg, meta){ return logEvent('warn', msg, meta); }\nfunction logError(msg, meta){ return logEvent('error', msg, meta); }\n\nmodule.exports = { logDebug, logInfo, logWarn, logError };\n"
    },
    {
      "op": "write_file",
      "path": "modular-framework/modules/splunk-logger/package.json",
      "mode": "create_new",
      "content": "{\n  \"name\": \"splunk-logger\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Splunk HEC logger bridge for modular-framework\",\n  \"main\": \"server/index.js\",\n  \"scripts\": {\"start\": \"node server/index.js\"},\n  \"dependencies\": {}\n}"
    },
    {
      "op": "patch_text",
      "path": "modular-framework/modules/llm-chat/server/logger.js",
      "patches": [
        {
          "type": "insert_after",
          "match": "const LOG_MAX = Number(process.env.LOG_MAX || 1000);",
          "replacement": "\n\nlet SPLUNK_LOGGER = null;\ntry { SPLUNK_LOGGER = require('../../../splunk-logger'); } catch { SPLUNK_LOGGER = null; }\n"
        },
        {
          "type": "replace_literal",
          "match": "const logDebug = (msg, meta)=> addLog('debug', msg, meta);",
          "replacement": "const logDebug = (msg, meta)=> { addLog('debug', msg, meta); if (SPLUNK_LOGGER?.logDebug) SPLUNK_LOGGER.logDebug(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logInfo  = (msg, meta)=> addLog('info', msg, meta);",
          "replacement": "const logInfo  = (msg, meta)=> { addLog('info', msg, meta); if (SPLUNK_LOGGER?.logInfo) SPLUNK_LOGGER.logInfo(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logWarn  = (msg, meta)=> addLog('warn', msg, meta);",
          "replacement": "const logWarn  = (msg, meta)=> { addLog('warn', msg, meta); if (SPLUNK_LOGGER?.logWarn) SPLUNK_LOGGER.logWarn(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logError = (msg, meta)=> addLog('error', msg, meta);",
          "replacement": "const logError = (msg, meta)=> { addLog('error', msg, meta); if (SPLUNK_LOGGER?.logError) SPLUNK_LOGGER.logError(msg, meta); };"
        }
      ]
    },
    {
      "op": "patch_text",
      "path": "modular-framework/modules/llm-gateway/server/logger.js",
      "patches": [
        {
          "type": "insert_after",
          "match": "const LOG_MAX = Number(process.env.LOG_MAX || 1000);",
          "replacement": "\n\nlet SPLUNK_LOGGER = null;\ntry { SPLUNK_LOGGER = require('../../../splunk-logger'); } catch { SPLUNK_LOGGER = null; }\n"
        },
        {
          "type": "replace_literal",
          "match": "const logDebug = (msg, meta)=> addLog('debug', msg, meta);",
          "replacement": "const logDebug = (msg, meta)=> { addLog('debug', msg, meta); if (SPLUNK_LOGGER?.logDebug) SPLUNK_LOGGER.logDebug(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logInfo  = (msg, meta)=> addLog('info', msg, meta);",
          "replacement": "const logInfo  = (msg, meta)=> { addLog('info', msg, meta); if (SPLUNK_LOGGER?.logInfo) SPLUNK_LOGGER.logInfo(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logWarn  = (msg, meta)=> addLog('warn', msg, meta);",
          "replacement": "const logWarn  = (msg, meta)=> { addLog('warn', msg, meta); if (SPLUNK_LOGGER?.logWarn) SPLUNK_LOGGER.logWarn(msg, meta); };"
        },
        {
          "type": "replace_literal",
          "match": "const logError = (msg, meta)=> addLog('error', msg, meta);",
          "replacement": "const logError = (msg, meta)=> { addLog('error', msg, meta); if (SPLUNK_LOGGER?.logError) SPLUNK_LOGGER.logError(msg, meta); };"
        }
      ]
    }
  ]
}
