{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/code-change-plan.schema.json",
  "title": "CodeChangePlan",
  "type": "object",
  "version": "1.0",
  "project_root": ".",
  "dry_run": false,
  "backup": false,
  "changes": [
    {
      "op": "write_file",
      "id": "root-index-html",
      "description": "Create modular index.html with clean structure, external CSS, and ES modules. Monaco loader included.",
      "path": "index.html",
      "mode": "create_new",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Web IDE Pro</title>\n  <link rel=\"stylesheet\" href=\"assets/css/base.css\" />\n  <link rel=\"stylesheet\" href=\"assets/css/ide.css\" />\n</head>\n<body>\n  <div class=\"ide-container\">\n    <!-- Repository Sidebar -->\n    <aside class=\"repo-sidebar\">\n      <div class=\"sidebar-header\">\n        <span>REPOSITORY</span>\n        <button class=\"btn small\" data-action=\"modal:open\" data-target=\"#githubModal\" aria-label=\"Open GitHub modal\">üîó</button>\n      </div>\n      <div class=\"sidebar-content\">\n        <div class=\"repo-explorer\">\n          <!-- Git Section -->\n          <section class=\"repo-section\">\n            <header class=\"repo-section-header\" data-toggle-section=\"git\">\n              <span>üåø Git Repository</span>\n              <span id=\"gitToggle\">‚ñº</span>\n            </header>\n            <div class=\"repo-section-content\" id=\"gitSection\">\n              <div class=\"input-group\">\n                <label for=\"branchSelector\">Current Branch</label>\n                <select id=\"branchSelector\">\n                  <option value=\"main\">main</option>\n                  <option value=\"develop\">develop</option>\n                  <option value=\"feature/auth\">feature/auth</option>\n                </select>\n              </div>\n              <div class=\"grid-2\">\n                <button class=\"btn small\" data-action=\"git:pull\">Pull</button>\n                <button class=\"btn small\" data-action=\"git:fetch\">Fetch</button>\n                <button class=\"btn small secondary\" data-action=\"git:stash\">Stash</button>\n                <button class=\"btn small secondary\" data-action=\"git:create-branch\">Branch</button>\n              </div>\n              <div class=\"input-group\">\n                <label for=\"commitMessage\">Commit Message</label>\n                <textarea class=\"db-query-editor\" id=\"commitMessage\" placeholder=\"Commit message...\"></textarea>\n              </div>\n              <button class=\"btn success small\" data-action=\"git:quick-commit-push\">üí´ Commit & Push</button>\n              <div class=\"repo-sublist\">\n                <div class=\"sub-title\">BRANCHES</div>\n                <div class=\"branch-list\" id=\"branchList\">\n                  <div class=\"branch-item current\"><span>üåø main</span><span>*</span></div>\n                  <div class=\"branch-item\"><span>üåø develop</span><span></span></div>\n                  <div class=\"branch-item\"><span>üåø feature/auth</span><span></span></div>\n                </div>\n              </div>\n              <div class=\"repo-sublist\">\n                <div class=\"sub-title\">RECENT COMMITS</div>\n                <div class=\"commit-list\" id=\"commitList\">\n                  <div class=\"commit-item\">\n                    <div><span class=\"commit-hash\">a1b2c3d</span> Add authentication</div>\n                    <div class=\"muted\">2 hours ago - John Doe</div>\n                  </div>\n                  <div class=\"commit-item\">\n                    <div><span class=\"commit-hash\">e4f5g6h</span> Fix navbar styling</div>\n                    <div class=\"muted\">1 day ago - Jane Smith</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n          <!-- Docker Section -->\n          <section class=\"repo-section\">\n            <header class=\"repo-section-header\" data-toggle-section=\"docker\">\n              <span>üê≥ Docker</span>\n              <span id=\"dockerToggle\">‚ñº</span>\n            </header>\n            <div class=\"repo-section-content\" id=\"dockerSection\">\n              <div class=\"grid-2\">\n                <button class=\"btn small\" data-action=\"docker:build\">Build</button>\n                <button class=\"btn small success\" data-action=\"docker:run\">Run</button>\n                <button class=\"btn small secondary\" data-action=\"docker:ps\">List</button>\n                <button class=\"btn small danger\" data-action=\"docker:stop\">Stop All</button>\n              </div>\n              <div class=\"repo-sublist\">\n                <div class=\"sub-title\">CONTAINERS</div>\n                <div id=\"dockerContainers\">\n                  <div class=\"docker-container\">\n                    <div class=\"row\">\n                      <div class=\"container-status running\"></div>\n                      <span>frontend</span>\n                    </div>\n                    <span class=\"ok\">Running</span>\n                  </div>\n                  <div class=\"docker-container\">\n                    <div class=\"row\">\n                      <div class=\"container-status running\"></div>\n                      <span>backend</span>\n                    </div>\n                    <span class=\"ok\">Running</span>\n                  </div>\n                  <div class=\"docker-container\">\n                    <div class=\"row\">\n                      <div class=\"container-status stopped\"></div>\n                      <span>postgres</span>\n                    </div>\n                    <span class=\"err\">Stopped</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n          <!-- Database Section -->\n          <section class=\"repo-section\">\n            <header class=\"repo-section-header\" data-toggle-section=\"database\">\n              <span>üóÑÔ∏è Database</span>\n              <span id=\"databaseToggle\">‚ñº</span>\n            </header>\n            <div class=\"repo-section-content\" id=\"databaseSection\">\n              <button class=\"btn small\" data-action=\"database:open-add-modal\">‚ûï Add Connection</button>\n              <div class=\"repo-sublist\">\n                <div class=\"sub-title\">CONNECTIONS</div>\n                <div id=\"databaseConnections\">\n                  <div class=\"database-connection\" data-action=\"database:connect\" data-connection=\"postgres_dev\">\n                    <div class=\"row\"><div class=\"db-status connected\"></div><span>PostgreSQL Dev</span></div>\n                    <span class=\"ok\">‚óè</span>\n                  </div>\n                  <div class=\"database-connection\" data-action=\"database:connect\" data-connection=\"mysql_prod\">\n                    <div class=\"row\"><div class=\"db-status disconnected\"></div><span>MySQL Prod</span></div>\n                    <span class=\"err\">‚óè</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </aside>\n\n    <!-- File Explorer Sidebar -->\n    <aside class=\"left-sidebar\">\n      <div class=\"sidebar-header\">\n        <span>FILE EXPLORER</span>\n        <div class=\"row gap-4\">\n          <button class=\"btn small secondary\" data-action=\"files:refresh\">‚Üª</button>\n          <button class=\"btn small\" data-action=\"files:new-file\">üìÑ</button>\n        </div>\n      </div>\n      <div class=\"sidebar-tabs\">\n        <div class=\"sidebar-tab active\" data-panel=\"explorer\">üìÅ</div>\n        <div class=\"sidebar-tab\" data-panel=\"search\">üîç</div>\n        <div class=\"sidebar-tab\" data-panel=\"ssh\">üîó</div>\n      </div>\n      <div class=\"sidebar-content\">\n        <div id=\"explorer-panel\" class=\"sidebar-panel\">\n          <div class=\"workspace-indicator\" id=\"workspaceIndicator\">Local</div>\n          <div class=\"file-tree\" id=\"fileTree\">\n            <div class=\"placeholder\">Loading files...</div>\n          </div>\n        </div>\n        <div id=\"search-panel\" class=\"sidebar-panel hidden\">\n          <div class=\"pad-12\">\n            <input id=\"searchInput\" type=\"text\" class=\"text-input\" placeholder=\"Search in files...\" />\n            <div id=\"searchResults\" class=\"scroll max-300\"></div>\n          </div>\n        </div>\n        <div id=\"ssh-panel\" class=\"sidebar-panel hidden\">\n          <div class=\"connection-panel\">\n            <div class=\"connection-status\">\n              <div class=\"status-indicator\" id=\"connectionStatus\"></div>\n              <span id=\"connectionText\">Disconnected</span>\n            </div>\n            <div class=\"input-group\">\n              <label for=\"sshHost\">Host</label>\n              <input type=\"text\" id=\"sshHost\" placeholder=\"dev-server.local\" value=\"dev-server.local\" />\n            </div>\n            <div class=\"input-group\">\n              <label for=\"sshPort\">Port</label>\n              <input type=\"number\" id=\"sshPort\" value=\"22\" />\n            </div>\n            <div class=\"input-group\">\n              <label for=\"sshUsername\">Username</label>\n              <input type=\"text\" id=\"sshUsername\" value=\"developer\" />\n            </div>\n            <div class=\"input-group\">\n              <label for=\"authMethod\">Authentication</label>\n              <select id=\"authMethod\">\n                <option value=\"key\">SSH Key</option>\n                <option value=\"password\">Password</option>\n              </select>\n            </div>\n            <div class=\"input-group hidden\" id=\"passwordGroup\">\n              <label for=\"sshPassword\">Password</label>\n              <input type=\"password\" id=\"sshPassword\" />\n            </div>\n            <div class=\"input-group\">\n              <label for=\"remotePath\">Remote Path</label>\n              <input type=\"text\" id=\"remotePath\" value=\"/var/www/html\" />\n            </div>\n            <button id=\"connectBtn\" class=\"btn\" data-action=\"ssh:connect\">üîó Connect SSH</button>\n            <button id=\"disconnectBtn\" class=\"btn danger hidden\" data-action=\"ssh:disconnect\">Disconnect</button>\n          </div>\n        </div>\n      </div>\n    </aside>\n\n    <!-- Main Content Area -->\n    <main class=\"main-content\">\n      <div class=\"toolbar\">\n        <div class=\"toolbar-group\">\n          <button class=\"btn small\" data-action=\"editor:save\">üíæ</button>\n          <button class=\"btn small secondary\" data-action=\"editor:save-all\">üíæ*</button>\n          <button class=\"btn small secondary\" data-action=\"editor:format\">üé®</button>\n        </div>\n        <div class=\"toolbar-group\">\n          <button class=\"btn small secondary\" data-action=\"files:new-file\">üìÑ</button>\n          <button class=\"btn small secondary\" data-action=\"files:new-folder\">üìÅ</button>\n          <button class=\"btn small secondary\" data-action=\"files:upload\">‚¨Ü</button>\n        </div>\n        <div class=\"toolbar-group\">\n          <button class=\"btn small secondary\" data-action=\"editor:show-diff\">üìã</button>\n          <button class=\"btn small secondary\" data-action=\"editor:toggle-minimap\">üó∫</button>\n          <button class=\"btn small secondary\" data-action=\"terminal:toggle\">üíª</button>\n        </div>\n        <div class=\"toolbar-group\">\n          <button class=\"btn small\" data-action=\"project:run\">‚ñ∂</button>\n          <button class=\"btn small secondary\" data-action=\"project:build\">üî®</button>\n          <button class=\"btn small secondary\" data-action=\"project:deploy\">üöÄ</button>\n        </div>\n      </div>\n      <div class=\"content-area\">\n        <div class=\"tabs-container\" id=\"tabsContainer\"></div>\n        <div class=\"editor-container\">\n          <div class=\"editor-area\">\n            <div id=\"monaco-editor\"></div>\n            <div id=\"monaco-diff\" class=\"hidden\"></div>\n          </div>\n        </div>\n        <div class=\"bottom-panel\" id=\"bottomPanel\">\n          <div class=\"bottom-tabs\">\n            <div class=\"bottom-tab active\" data-panel=\"terminal\">Terminal</div>\n            <div class=\"bottom-tab\" data-panel=\"problems\">Problems (0)</div>\n            <div class=\"bottom-tab\" data-panel=\"output\">Output</div>\n            <div class=\"bottom-tab\" data-panel=\"database\">Database</div>\n            <div class=\"bottom-tab\" data-panel=\"docker\">Docker Logs</div>\n          </div>\n          <div class=\"bottom-content\">\n            <div id=\"terminal-panel\" class=\"bottom-content-panel\">\n              <div class=\"terminal\" id=\"terminal\">\n                <div>üöÄ Advanced Web IDE Pro - Terminal</div>\n                <div>Connected to: <span id=\"terminalHost\">localhost</span></div>\n                <div>Type 'help' for available commands</div>\n                <div class=\"terminal-input\">\n                  <span class=\"terminal-prompt\">$</span>\n                  <input type=\"text\" class=\"terminal-command\" id=\"terminalInput\" placeholder=\"Enter command...\" />\n                </div>\n              </div>\n            </div>\n            <div id=\"problems-panel\" class=\"bottom-content-panel hidden\">\n              <div id=\"problemsList\" class=\"pad-8 scroll\">\n                <div class=\"placeholder\">No problems found</div>\n              </div>\n            </div>\n            <div id=\"output-panel\" class=\"bottom-content-panel hidden\">\n              <div class=\"terminal\" id=\"outputContent\"><div>Build Output Console</div></div>\n            </div>\n            <div id=\"database-panel\" class=\"bottom-content-panel hidden\">\n              <div class=\"database-browser\">\n                <div class=\"row gap-8\">\n                  <select id=\"dbConnectionSelect\">\n                    <option value=\"postgres_dev\">PostgreSQL Dev</option>\n                    <option value=\"mysql_prod\">MySQL Prod</option>\n                  </select>\n                  <button class=\"btn small\" data-action=\"database:execute-query\">‚ñ∂ Execute</button>\n                  <button class=\"btn small secondary\" data-action=\"database:clear-query\">Clear</button>\n                </div>\n                <textarea class=\"db-query-editor\" id=\"sqlQuery\" placeholder=\"SELECT * FROM users LIMIT 10;\">SELECT * FROM users WHERE created_at > '2024-01-01' ORDER BY id DESC LIMIT 50;</textarea>\n                <div class=\"db-results\" id=\"queryResults\">\n                  <table class=\"db-table\">\n                    <thead><tr><th>ID</th><th>Name</th><th>Email</th><th>Created</th></tr></thead>\n                    <tbody>\n                      <tr><td>1</td><td>John Doe</td><td>john@example.com</td><td>2024-01-15</td></tr>\n                      <tr><td>2</td><td>Jane Smith</td><td>jane@example.com</td><td>2024-01-14</td></tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n            <div id=\"docker-panel\" class=\"bottom-content-panel hidden\">\n              <div class=\"terminal\" id=\"dockerLogs\">\n                <div>üê≥ Docker Container Logs</div>\n                <div>[frontend] Starting development server...</div>\n                <div>[frontend] Server running on http://localhost:3000</div>\n                <div>[backend] API server started on port 3001</div>\n                <div>[postgres] Database ready for connections</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"status-bar\">\n        <div class=\"status-left\">\n          <span id=\"statusMessage\">Ready</span>\n          <span id=\"connectionInfo\">üîó Local</span>\n          <span id=\"gitInfo\">üåø main</span>\n          <span id=\"dockerInfo\">üê≥ 3 containers</span>\n        </div>\n        <div class=\"status-right\">\n          <span id=\"cursorPosition\">Line 1, Column 1</span>\n          <span id=\"languageMode\">Markdown</span>\n          <span id=\"encodingInfo\">UTF-8</span>\n        </div>\n      </div>\n    </main>\n  </div>\n\n  <!-- GitHub Modal -->\n  <div id=\"githubModal\" class=\"modal hidden\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"githubModalTitle\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h3 id=\"githubModalTitle\">üêô GitHub Integration</h3>\n        <span class=\"modal-close\" data-action=\"modal:close\" data-target=\"#githubModal\">√ó</span>\n      </div>\n      <div class=\"input-group\">\n        <label for=\"githubToken\">GitHub Token</label>\n        <input type=\"password\" id=\"githubToken\" placeholder=\"ghp_...\" />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"repoUrl\">Repository URL</label>\n        <input type=\"text\" id=\"repoUrl\" placeholder=\"https://github.com/user/repo.git\" />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"gitAction\">Action</label>\n        <select id=\"gitAction\">\n          <option value=\"clone\">Clone Repository</option>\n          <option value=\"init\">Initialize & Connect</option>\n          <option value=\"connect\">Connect Existing</option>\n        </select>\n      </div>\n      <div class=\"row gap-8 top-16\">\n        <button class=\"btn\" data-action=\"github:execute\">Execute</button>\n        <button class=\"btn secondary\" data-action=\"modal:close\" data-target=\"#githubModal\">Cancel</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Database Modal -->\n  <div id=\"databaseModal\" class=\"modal hidden\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"databaseModalTitle\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h3 id=\"databaseModalTitle\">üóÑÔ∏è Add Database Connection</h3>\n        <span class=\"modal-close\" data-action=\"modal:close\" data-target=\"#databaseModal\">√ó</span>\n      </div>\n      <div class=\"input-group\">\n        <label for=\"dbType\">Database Type</label>\n        <select id=\"dbType\">\n          <option value=\"postgresql\">PostgreSQL</option>\n          <option value=\"mysql\">MySQL</option>\n          <option value=\"mongodb\">MongoDB</option>\n          <option value=\"redis\">Redis</option>\n          <option value=\"sqlite\">SQLite</option>\n        </select>\n      </div>\n      <div class=\"input-group\"><label for=\"dbName\">Connection Name</label><input type=\"text\" id=\"dbName\" placeholder=\"My Database\" /></div>\n      <div class=\"input-group\"><label for=\"dbHost\">Host</label><input type=\"text\" id=\"dbHost\" placeholder=\"localhost\" /></div>\n      <div class=\"input-group\"><label for=\"dbPort\">Port</label><input type=\"number\" id=\"dbPort\" placeholder=\"5432\" /></div>\n      <div class=\"input-group\"><label for=\"dbDatabase\">Database</label><input type=\"text\" id=\"dbDatabase\" placeholder=\"myapp\" /></div>\n      <div class=\"input-group\"><label for=\"dbUsername\">Username</label><input type=\"text\" id=\"dbUsername\" placeholder=\"user\" /></div>\n      <div class=\"input-group\"><label for=\"dbPassword\">Password</label><input type=\"password\" id=\"dbPassword\" placeholder=\"password\" /></div>\n      <div class=\"row gap-8 top-16\">\n        <button class=\"btn\" data-action=\"database:test-connection\">Test Connection</button>\n        <button class=\"btn success\" data-action=\"database:save-connection\">Save</button>\n        <button class=\"btn secondary\" data-action=\"modal:close\" data-target=\"#databaseModal\">Cancel</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Monaco Loader (AMD) -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js\"></script>\n  <script>\n    // Configure Monaco path before main.js runs\n    window.require && window.require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });\n  </script>\n  <script type=\"module\" src=\"src/main.js\"></script>\n</body>\n</html>\n"
    },
    {
      "op": "write_file",
      "id": "css-base",
      "description": "Base reset and utilities",
      "path": "assets/css/base.css",
      "mode": "create_new",
      "content": "*,*::before,*::after{box-sizing:border-box}html,body{height:100%}body{margin:0;font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;background:#1e1e1e;color:#ccc;overflow:hidden}\n.hidden{display:none !important}\n.scroll{overflow:auto}\n.max-300{max-height:300px}\n.pad-8{padding:8px}\n.pad-12{padding:12px}\n.placeholder{padding:20px;text-align:center;color:#9d9d9d}\n.row{display:flex;align-items:center}\n.gap-4{gap:4px}\n.gap-8{gap:8px}\n.top-16{margin-top:16px}\n.ok{color:#27ae60}\n.err{color:#e74c3c}\n.muted{font-size:10px;color:#9d9d9d}\n.text-input{width:100%;padding:6px 8px;background:#3c3c3c;border:1px solid #5a5a5a;border-radius:2px;color:#ccc;font-size:12px}\n.grid-2{display:grid;grid-template-columns:1fr 1fr;gap:4px;margin-bottom:8px}\n"
    },
    {
      "op": "write_file",
      "id": "css-ide",
      "description": "Main IDE styles extracted from original",
      "path": "assets/css/ide.css",
      "mode": "create_new",
      "content": ".ide-container{display:flex;height:100vh}\n.repo-sidebar{width:260px;background:#1e1e1e;border-right:1px solid #3e3e3e;display:flex;flex-direction:column;resize:horizontal;overflow:hidden}\n.left-sidebar{width:280px;background:#252526;border-right:1px solid #3e3e3e;display:flex;flex-direction:column;resize:horizontal;overflow:hidden}\n.sidebar-header{padding:10px;background:#2d2d30;border-bottom:1px solid #3e3e3e;font-weight:bold;text-transform:uppercase;font-size:11px;letter-spacing:.5px;display:flex;justify-content:space-between;align-items:center}\n.sidebar-tabs{display:flex;background:#2d2d30;border-bottom:1px solid #3e3e3e}\n.sidebar-tab{padding:8px 12px;cursor:pointer;font-size:11px;border-right:1px solid #3e3e3e;transition:background .2s;flex:1;text-align:center}\n.sidebar-tab.active{background:#252526;color:#fff}\n.sidebar-tab:hover:not(.active){background:#383838}\n.sidebar-content{flex:1;overflow-y:auto}\n.connection-panel{padding:12px}\n.connection-status{display:flex;align-items:center;gap:8px;margin-bottom:12px;padding:8px;background:#1e1e1e;border-radius:4px}\n.status-indicator{width:8px;height:8px;border-radius:50%;background:#ff6b6b}\n.status-indicator.connected{background:#51cf66;animation:pulse 2s infinite}\n@keyframes pulse{0%{opacity:1}50%{opacity:.5}100%{opacity:1}}\n.input-group{margin-bottom:10px}\n.input-group label{display:block;margin-bottom:4px;font-size:11px;color:#9d9d9d}\n.input-group input,.input-group select,.input-group textarea{width:100%;padding:6px 8px;background:#3c3c3c;border:1px solid #5a5a5a;border-radius:2px;color:#ccc;font-size:12px}\n.btn{padding:6px 12px;background:#0e639c;color:#fff;border:none;border-radius:2px;cursor:pointer;font-size:11px;transition:background .2s;width:100%;margin-bottom:6px}\n.btn:hover{background:#1177bb}\n.btn.secondary{background:#5a5a5a}\n.btn.danger{background:#e74c3c}\n.btn.success{background:#27ae60}\n.btn.small{padding:4px 8px;font-size:10px;width:auto}\n.file-tree{padding:8px 0}\n.file-item,.folder-item{padding:4px 12px;cursor:pointer;display:flex;align-items:center;font-size:12px;transition:background .1s;position:relative;gap:6px}\n.file-item:hover,.folder-item:hover{background:#2a2d2e}\n.file-item.active{background:#094771;color:#fff}\n.file-item.modified::after{content:'‚óè';position:absolute;right:8px;color:#ff9800}\n.folder-children{margin-left:16px}\n.folder-children.hidden{display:none}\n.repo-explorer{padding:12px}\n.repo-section{margin-bottom:16px;border:1px solid #3e3e3e;border-radius:4px;background:#252526}\n.repo-section-header{padding:8px 12px;background:#2d2d30;font-weight:bold;font-size:11px;display:flex;justify-content:space-between;align-items:center;cursor:pointer}\n.repo-section-content{padding:12px}\n.repo-section-content.collapsed{display:none}\n.repo-sublist{margin-top:12px}\n.sub-title{font-size:10px;color:#9d9d9d;margin-bottom:4px}\n.branch-list,.commit-list{max-height:150px;overflow-y:auto}\n.branch-item{display:flex;align-items:center;justify-content:space-between;padding:4px 8px;margin:2px 0;border-radius:2px;font-size:11px;cursor:pointer}\n.branch-item:hover{background:#2a2d2e}\n.branch-item.current{background:#094771;color:#fff}\n.commit-item{padding:6px 8px;margin:2px 0;border-left:3px solid #0e639c;font-size:11px;background:#1e1e1e;border-radius:2px;cursor:pointer}\n.commit-item:hover{background:#2a2d2e}\n.commit-hash{color:#ff9800;font-family:monospace}\n.docker-container{display:flex;align-items:center;justify-content:space-between;padding:6px 8px;margin:2px 0;background:#1e1e1e;border-radius:2px;font-size:11px}\n.container-status{width:6px;height:6px;border-radius:50%;margin-right:6px}\n.container-status.running{background:#27ae60}\n.container-status.stopped{background:#e74c3c}\n.database-connection{display:flex;align-items:center;justify-content:space-between;padding:6px 8px;margin:2px 0;background:#1e1e1e;border-radius:2px;font-size:11px;cursor:pointer}\n.database-connection:hover{background:#2a2d2e}\n.db-status{width:6px;height:6px;border-radius:50%;margin-right:6px}\n.db-status.connected{background:#27ae60}\n.db-status.disconnected{background:#e74c3c}\n.main-content{flex:1;display:flex;flex-direction:column}\n.toolbar{background:#2d2d30;padding:6px 12px;border-bottom:1px solid #3e3e3e;display:flex;gap:6px;align-items:center;flex-wrap:wrap}\n.toolbar-group{display:flex;gap:4px;align-items:center;border-right:1px solid #5a5a5a;padding-right:8px;margin-right:8px}\n.toolbar-group:last-child{border-right:none;margin-right:0}\n.content-area{flex:1;display:flex;flex-direction:column}\n.tabs-container{background:#2d2d30;border-bottom:1px solid #3e3e3e;display:flex;overflow-x:auto;min-height:35px}\n.tab{padding:8px 16px;background:#2d2d30;border-right:1px solid #3e3e3e;cursor:pointer;display:flex;align-items:center;font-size:12px;white-space:nowrap;position:relative;min-width:120px}\n.tab.active{background:#1e1e1e;color:#fff}\n.tab-close{margin-left:8px;opacity:.6;cursor:pointer;width:16px;height:16px;display:flex;align-items:center;justify-content:center;border-radius:2px}\n.tab-close:hover{opacity:1;background:#e81123}\n.editor-container{flex:1;display:flex}\n.editor-area{flex:1;position:relative}\n.bottom-panel{height:200px;background:#252526;border-top:1px solid #3e3e3e;display:flex;flex-direction:column;resize:vertical;overflow:hidden}\n.bottom-panel.hidden{height:0;min-height:0}\n.bottom-tabs{display:flex;background:#2d2d30;border-bottom:1px solid #3e3e3e}\n.bottom-tab{padding:6px 12px;cursor:pointer;font-size:11px;border-right:1px solid #3e3e3e}\n.bottom-tab.active{background:#252526}\n.bottom-content{flex:1;overflow:hidden}\n.terminal{width:100%;height:100%;background:#1e1e1e;color:#0f0;font-family:'Courier New', monospace;padding:8px;overflow-y:auto;font-size:11px;line-height:1.4}\n.terminal-input{display:flex;align-items:center;margin-top:8px}\n.terminal-prompt{color:#0f0;margin-right:8px}\n.terminal-command{flex:1;background:transparent;border:none;color:#0f0;font-family:inherit;font-size:inherit;outline:none}\n.database-browser{padding:8px;height:100%;overflow-y:auto}\n.db-query-editor{width:100%;height:60px;background:#3c3c3c;border:1px solid #5a5a5a;color:#ccc;padding:8px;border-radius:2px;resize:vertical;font-family:'Courier New', monospace;font-size:11px;margin-bottom:8px}\n.db-results{background:#1e1e1e;border:1px solid #3e3e3e;border-radius:2px;overflow:auto;max-height:200px}\n.db-table{width:100%;border-collapse:collapse;font-size:11px}\n.db-table th,.db-table td{padding:4px 8px;text-align:left;border-bottom:1px solid #3e3e3e}\n.db-table th{background:#2d2d30;font-weight:bold}\n.status-bar{background:#007acc;color:#fff;padding:4px 12px;font-size:11px;display:flex;justify-content:space-between;align-items:center}\n.notification{position:fixed;top:20px;right:20px;background:#27ae60;color:#fff;padding:12px 16px;border-radius:4px;z-index:1001;box-shadow:0 4px 8px rgba(0,0,0,.3);max-width:300px;cursor:pointer}\n.notification.error{background:#e74c3c}\n.notification.warning{background:#f39c12}\n.notification.info{background:#3498db}\n#monaco-editor,#monaco-diff{height:100%;width:100%}\n.workspace-indicator{position:absolute;top:8px;right:8px;background:#094771;color:#fff;padding:2px 6px;border-radius:2px;font-size:10px}\n.modal{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7);display:flex;align-items:center;justify-content:center;z-index:1000}\n.modal-content{background:#252526;border:1px solid #3e3e3e;border-radius:4px;padding:20px;max-width:600px;width:90%;max-height:80vh;overflow-y:auto}\n.modal-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px;border-bottom:1px solid #3e3e3e;padding-bottom:8px}\n.modal-close{cursor:pointer;font-size:18px;opacity:.7}\n.modal-close:hover{opacity:1}\n"
    },
    {
      "op": "write_file",
      "id": "js-main",
      "description": "Main app bootstrap, wiring modules, event delegation, keyboard shortcuts.",
      "path": "src/main.js",
      "mode": "create_new",
      "content": "import { Logger } from './core/logger.js';\nimport { bus } from './core/eventBus.js';\nimport { state } from './core/state.js';\nimport { qs, qsa } from './ui/dom.js';\nimport { showNotification } from './ui/notifications.js';\nimport { initPanels } from './ui/panels.js';\nimport { initFileTree, renderFileTree } from './ui/fileTree.js';\nimport { initTabs, updateTabs, closeFile, switchToFile } from './ui/tabs.js';\nimport { setStatus } from './ui/statusBar.js';\nimport { initModals } from './ui/modals.js';\nimport { initEditor, loadFileInEditor, showDiff, toggleMinimap, getEditorValue } from './editor/index.js';\nimport { initTerminal, addToTerminal, addToOutput, addToDockerLogs, toggleTerminalPanel } from './terminal/index.js';\nimport * as API from './services/api.js';\nimport * as Git from './services/git.js';\nimport * as Docker from './services/docker.js';\nimport * as DB from './services/db.js';\nimport * as SSH from './services/ssh.js';\nimport * as Search from './services/search.js';\nimport { getFileFromPath, getLanguageFromPath } from './utils/path.js';\nimport { localTree } from './data/sampleFileTree.js';\n\nLogger.info('Bootstrapping IDE...');\n\n// Ensure Monaco is ready, then initialize modules\nfunction bootstrap() {\n  if (!window.require) {\n    Logger.error('Monaco loader not found.');\n    showNotification('‚ùå Monaco loader not found', 'error');\n    return;\n  }\n  window.require(['vs/editor/editor.main'], () => {\n    Logger.info('Monaco loaded');\n    state.fileTree = localTree;\n\n    initPanels();\n    initModals();\n    initTerminal();\n\n    initEditor({\n      onCursorMove: (pos) => {\n        qs('#cursorPosition').textContent = `Line ${pos.lineNumber}, Column ${pos.column}`;\n      },\n      onContentChange: () => {\n        // Notify others about potential modifications\n        if (state.activeFile) bus.emit('file:modified', { path: state.activeFile });\n      }\n    });\n\n    initTabs();\n    initFileTree();\n\n    // Render initial state\n    setTimeout(() => {\n      renderFileTree();\n      bus.emit('file:open', { path: 'README.md' });\n      updateGitStatus();\n    }, 200);\n\n    // Event subscriptions\n    bus.on('file:open', ({ path }) => {\n      const file = getFileFromPath(path);\n      if (!file || file.type !== 'file') return;\n      if (!state.openFiles.has(path)) {\n        state.openFiles.set(path, { content: file.content, originalContent: file.content, modified: false });\n      }\n      state.activeFile = path;\n      updateTabs();\n      loadFileInEditor(path);\n      bus.emit('ui:fileTree:selection');\n      setStatus(`üìñ Opened ${path}`);\n      qs('#languageMode').textContent = (getLanguageFromPath(path) || 'plaintext').toUpperCase();\n    });\n\n    bus.on('workspace:changed', ({ connected, host }) => {\n      const termHost = qs('#terminalHost');\n      if (termHost) termHost.textContent = connected ? host : 'localhost';\n    });\n\n    bus.on('fileTree:replace', ({ tree }) => {\n      state.fileTree = tree;\n      renderFileTree();\n    });\n\n    bus.on('editor:save', () => saveCurrentFile());\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key) {\n          case 's':\n            e.preventDefault();\n            if (e.shiftKey) saveAllFiles(); else saveCurrentFile();\n            break;\n          case 'n':\n            e.preventDefault();\n            newFile();\n            break;\n          case '`':\n            e.preventDefault();\n            toggleTerminalPanel();\n            break;\n        }\n      }\n    });\n\n    // Event delegation\n    document.body.addEventListener('click', onActionClick);\n\n    // Search input\n    qs('#searchInput')?.addEventListener('input', (e) => Search.searchInFiles(e.target.value));\n\n    // Auth method change\n    qs('#authMethod')?.addEventListener('change', (e) => {\n      const group = qs('#passwordGroup');\n      if (!group) return;\n      group.classList.toggle('hidden', e.target.value !== 'password');\n    });\n\n    Logger.info('IDE initialized');\n    console.log('Use window.AdvancedCodeEditorAPI for external control');\n\n    // Expose limited external API\n    window.AdvancedCodeEditorAPI = {\n      openFile: (path, content) => {\n        state.fileTree[path] = { type: 'file', content };\n        renderFileTree();\n        bus.emit('file:open', { path });\n      },\n      connectToRemote: (config) => API.connectSSH(config),\n      getCurrentFile: () => state.activeFile,\n      getCurrentContent: () => getEditorValue(),\n      showNotification: (message, type) => showNotification(message, type),\n      API\n    };\n  });\n}\n\nfunction onActionClick(e) {\n  const btn = e.target.closest('[data-action]');\n  if (!btn) return;\n  const action = btn.getAttribute('data-action');\n  switch (action) {\n    // Panels / Modals\n    case 'modal:open': {\n      const t = btn.getAttribute('data-target');\n      bus.emit('modal:open', { target: t });\n      break;\n    }\n    case 'modal:close': {\n      const t = btn.getAttribute('data-target');\n      bus.emit('modal:close', { target: t });\n      break;\n    }\n    // Git\n    case 'git:pull': Git.pull().then(updateGitStatus); break;\n    case 'git:fetch': Git.fetch().then(updateGitStatus); break;\n    case 'git:stash': Git.stash().then(updateGitStatus); break;\n    case 'git:create-branch': Git.createBranch(); break;\n    case 'git:quick-commit-push': Git.quickCommitPush(qs('#commitMessage')?.value || '').then(updateGitStatus); break;\n    // Docker\n    case 'docker:build': Docker.build(); break;\n    case 'docker:run': Docker.run(); break;\n    case 'docker:ps': Docker.ps(); break;\n    case 'docker:stop': Docker.stopAll(); break;\n    // DB\n    case 'database:open-add-modal': bus.emit('modal:open', { target: '#databaseModal' }); break;\n    case 'database:test-connection': DB.testConnection(); break;\n    case 'database:save-connection': DB.saveConnection(); break;\n    case 'database:execute-query': DB.executeQuery(); break;\n    case 'database:clear-query': DB.clearQuery(); break;\n    case 'database:connect': DB.connect(btn.getAttribute('data-connection')); break;\n    // SSH\n    case 'ssh:connect': SSH.connect(); break;\n    case 'ssh:disconnect': SSH.disconnect(); break;\n    // Files\n    case 'files:refresh': renderFileTree(); showNotification('üìÇ File tree refreshed', 'info'); break;\n    case 'files:new-file': newFile(); break;\n    case 'files:new-folder': newFolder(); break;\n    case 'files:upload': uploadFile(); break;\n    // Editor\n    case 'editor:save': saveCurrentFile(); break;\n    case 'editor:save-all': saveAllFiles(); break;\n    case 'editor:format': formatDocument(); break;\n    case 'editor:show-diff': showDiff(); break;\n    case 'editor:toggle-minimap': toggleMinimap(); break;\n    // Terminal\n    case 'terminal:toggle': toggleTerminalPanel(); break;\n    // Project\n    case 'project:build': buildProject(); break;\n    case 'project:run': runProject(); break;\n    case 'project:deploy': deployProject(); break;\n    // GitHub\n    case 'github:execute': API.executeGitHubAction(); break;\n  }\n}\n\nfunction updateGitStatus() {\n  const el = qs('#gitInfo');\n  if (el) el.textContent = `üåø ${state.git.branch}`;\n}\n\n// File operations and helpers (UI-level)\nfunction newFile() {\n  const fileName = prompt('Enter file name:', 'newfile.js');\n  if (!fileName) return;\n  const content = `// New file: ${fileName}\\n// Created: ${new Date().toISOString()}\\n\\n`;\n  state.fileTree[fileName] = { type: 'file', content };\n  state.openFiles.set(fileName, { content, originalContent: '', modified: true });\n  state.activeFile = fileName;\n  renderFileTree();\n  updateTabs();\n  loadFileInEditor(fileName);\n  setStatus(`üìÑ Created ${fileName}`);\n}\n\nfunction newFolder() {\n  const folderName = prompt('Enter folder name:', 'new-folder');\n  if (!folderName) return;\n  state.fileTree[folderName] = { type: 'folder', children: {} };\n  renderFileTree();\n  setStatus(`üìÅ Created folder ${folderName}`);\n}\n\nfunction uploadFile() {\n  const input = document.createElement('input');\n  input.type = 'file';\n  input.multiple = true;\n  input.onchange = (e) => {\n    Array.from(e.target.files).forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = (ev) => {\n        state.fileTree[file.name] = { type: 'file', content: ev.target.result };\n        renderFileTree();\n        showNotification(`‚¨ÜÔ∏è Uploaded ${file.name}`, 'success');\n      };\n      reader.readAsText(file);\n    });\n  };\n  input.click();\n}\n\nfunction saveCurrentFile() {\n  if (!state.activeFile || !state.editor) return;\n  const content = getEditorValue();\n  const fileData = state.openFiles.get(state.activeFile);\n  if (!fileData) return;\n  fileData.originalContent = content;\n  fileData.modified = false;\n  const f = getFileFromPath(state.activeFile);\n  if (f) f.content = content;\n  updateTabs();\n  bus.emit('ui:fileTree:selection');\n  setStatus(`üíæ Saved ${state.activeFile}`);\n  showNotification(`‚úÖ File saved: ${state.activeFile.split('/').pop()}`, 'success');\n}\n\nfunction saveAllFiles() {\n  let saved = 0;\n  for (const [path, fileData] of state.openFiles) {\n    if (fileData.modified) {\n      fileData.originalContent = fileData.content;\n      fileData.modified = false;\n      const f = getFileFromPath(path);\n      if (f) f.content = fileData.content;\n      saved++;\n    }\n  }\n  updateTabs();\n  bus.emit('ui:fileTree:selection');\n  showNotification(`‚úÖ Saved ${saved} files`, 'success');\n}\n\nfunction formatDocument() {\n  if (state.editor && state.activeFile) {\n    state.editor.getAction('editor.action.formatDocument').run();\n    setStatus('üé® Document formatted');\n  }\n}\n\nfunction buildProject() {\n  bus.emit('panel:show', { name: 'output' });\n  addToOutput(`üî® Building project...`);\n  setTimeout(() => addToOutput('‚úÖ Build completed successfully!'), 1500);\n}\n\nfunction runProject() {\n  bus.emit('panel:show', { name: 'output' });\n  addToOutput(`‚ñ∂Ô∏è Starting project...`);\n  setTimeout(() => addToOutput('üöÄ Server running on http://localhost:3000'), 1200);\n}\n\nfunction deployProject() {\n  bus.emit('panel:show', { name: 'output' });\n  addToOutput('üöÄ Deploying project...');\n  setTimeout(() => { addToOutput('‚úÖ Deployment successful!'); showNotification('üöÄ Project deployed!', 'success'); }, 1500);\n}\n\n// Start\nbootstrap();\n"
    },
    {
      "op": "write_file",
      "id": "core-logger",
      "description": "Structured logger",
      "path": "src/core/logger.js",
      "mode": "create_new",
      "content": "const LEVELS = ['debug','info','warn','error'];\nconst envLevel = (typeof window !== 'undefined' && window.__LOG_LEVEL) || 'debug';\nconst current = LEVELS.indexOf(envLevel);\nfunction ts(){return new Date().toISOString();}\nexport const Logger = {\n  debug: (...args)=>{ if(LEVELS.indexOf('debug')>=current) console.debug(`[DBG ${ts()}]`,...args); },\n  info:  (...args)=>{ if(LEVELS.indexOf('info') >=current) console.info (`[INF ${ts()}]`,...args); },\n  warn:  (...args)=>{ if(LEVELS.indexOf('warn') >=current) console.warn (`[WRN ${ts()}]`,...args); },\n  error: (...args)=>{ if(LEVELS.indexOf('error')>=current) console.error(`[ERR ${ts()}]`,...args); }\n};\n"
    },
    {
      "op": "write_file",
      "id": "core-bus",
      "description": "Simple event bus",
      "path": "src/core/eventBus.js",
      "mode": "create_new",
      "content": "class EventBus {\n  constructor(){ this.map = new Map(); }\n  on(ev, cb){ if(!this.map.has(ev)) this.map.set(ev, new Set()); this.map.get(ev).add(cb); return ()=>this.off(ev, cb); }\n  once(ev, cb){ const off = this.on(ev,(...a)=>{ off(); cb(...a); }); return off; }\n  off(ev, cb){ this.map.get(ev)?.delete(cb); }\n  emit(ev, payload){ this.map.get(ev)?.forEach(fn=>{ try{ fn(payload);}catch(e){ console.error('Event handler error', ev, e);} }); }\n}\nexport const bus = new EventBus();\n"
    },
    {
      "op": "write_file",
      "id": "core-state",
      "description": "Central app state",
      "path": "src/core/state.js",
      "mode": "create_new",
      "content": "export const state = {\n  editor: null,\n  diffEditor: null,\n  openFiles: new Map(),\n  activeFile: null,\n  isConnected: false,\n  currentWorkspace: 'local',\n  git: { branch: 'main', url: 'https://github.com/user/repo.git' },\n  fileTree: {}\n};\n"
    },
    {
      "op": "write_file",
      "id": "ui-dom",
      "description": "DOM helpers",
      "path": "src/ui/dom.js",
      "mode": "create_new",
      "content": "export const qs = (sel, root=document) => root.querySelector(sel);\nexport const qsa = (sel, root=document) => Array.from(root.querySelectorAll(sel));\nexport function el(tag, attrs={}, ...children){\n  const node = document.createElement(tag);\n  Object.entries(attrs).forEach(([k,v])=>{\n    if (k === 'className') node.className = v; else if (k.startsWith('on') && typeof v==='function') node.addEventListener(k.slice(2).toLowerCase(), v); else node.setAttribute(k, v);\n  });\n  children.forEach(c=>{ if(c==null) return; if (typeof c==='string') node.appendChild(document.createTextNode(c)); else node.appendChild(c); });\n  return node;\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-notifications",
      "description": "Floating notification system",
      "path": "src/ui/notifications.js",
      "mode": "create_new",
      "content": "export function showNotification(message, type='info', timeout=4000){\n  document.querySelectorAll('.notification').forEach(n=>n.remove());\n  const n = document.createElement('div');\n  n.className = `notification ${type}`;\n  n.textContent = message;\n  document.body.appendChild(n);\n  const rm = () => { if(n.parentNode) n.remove(); };\n  setTimeout(rm, timeout);\n  n.addEventListener('click', rm);\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-panels",
      "description": "Sidebar/bottom panel switching and connection indicator updates",
      "path": "src/ui/panels.js",
      "mode": "create_new",
      "content": "import { qs, qsa } from './dom.js';\nimport { bus } from '../core/eventBus.js';\n\nexport function initPanels(){\n  // Sidebar tabs\n  qsa('.sidebar-tab').forEach(tab=>{\n    tab.addEventListener('click', ()=> switchSidebarPanel(tab.dataset.panel));\n  });\n\n  // Bottom tabs\n  qsa('.bottom-tab').forEach(tab=>{\n    tab.addEventListener('click', ()=> switchBottomPanel(tab.dataset.panel));\n  });\n\n  // Collapsible repo sections\n  qsa('[data-toggle-section]').forEach(header => {\n    header.addEventListener('click', ()=> toggleRepoSection(header.getAttribute('data-toggle-section')));\n  });\n\n  // Events\n  bus.on('panel:show', ({ name }) => switchBottomPanel(name));\n}\n\nexport function switchSidebarPanel(panel){\n  qsa('.sidebar-tab').forEach(t=>t.classList.remove('active'));\n  qsa('.sidebar-panel').forEach(p=>p.classList.add('hidden'));\n  qs(`[data-panel=\"${panel}\"]`)?.classList.add('active');\n  qs(`#${panel}-panel`)?.classList.remove('hidden');\n}\n\nexport function switchBottomPanel(panel){\n  qsa('.bottom-tab').forEach(t=>t.classList.remove('active'));\n  qsa('.bottom-content-panel').forEach(p=>p.classList.add('hidden'));\n  qs(`[data-panel=\"${panel}\"]`)?.classList.add('active');\n  qs(`#${panel}-panel`)?.classList.remove('hidden');\n}\n\nexport function updateWorkspaceIndicator(text){\n  const el = qs('#workspaceIndicator'); if (el) el.textContent = text;\n}\n\nexport function updateConnectionStatus(connected, host=''){\n  const indicator = qs('#connectionStatus');\n  const text = qs('#connectionText');\n  const info = qs('#connectionInfo');\n  if (!indicator || !text || !info) return;\n  if (connected){\n    indicator.classList.add('connected');\n    text.textContent = `Connected to ${host}`;\n    info.textContent = `üîó ${host}`;\n  } else {\n    indicator.classList.remove('connected');\n    text.textContent = 'Disconnected';\n    info.textContent = 'üîó Local';\n  }\n}\n\nexport function toggleRepoSection(name){\n  const content = qs(`#${name}Section`);\n  const toggle = qs(`#${name}Toggle`);\n  if (!content || !toggle) return;\n  content.classList.toggle('collapsed');\n  toggle.textContent = content.classList.contains('collapsed') ? '‚ñ∂' : '‚ñº';\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-fileTree",
      "description": "File tree rendering and selection",
      "path": "src/ui/fileTree.js",
      "mode": "create_new",
      "content": "import { qs } from './dom.js';\nimport { state } from '../core/state.js';\nimport { bus } from '../core/eventBus.js';\nimport { getFileIcon } from '../utils/path.js';\n\nexport function initFileTree(){\n  renderFileTree();\n  bus.on('ui:fileTree:selection', highlightSelection);\n}\n\nexport function renderFileTree(){\n  const container = qs('#fileTree');\n  if (!container) return;\n  container.innerHTML = '';\n  renderNode(state.fileTree, container, '');\n}\n\nfunction renderNode(node, container, path){\n  Object.entries(node).forEach(([name, item])=>{\n    const fullPath = path ? `${path}/${name}` : name;\n    if (item.type === 'folder'){\n      const folderDiv = document.createElement('div');\n      folderDiv.className = 'folder-item expanded';\n      folderDiv.innerHTML = `<span>üìÅ</span><span>${name}</span>`;\n      const childrenDiv = document.createElement('div');\n      childrenDiv.className = 'folder-children';\n      folderDiv.addEventListener('click', (e)=>{\n        e.stopPropagation();\n        childrenDiv.classList.toggle('hidden');\n      });\n      container.appendChild(folderDiv);\n      container.appendChild(childrenDiv);\n      renderNode(item.children, childrenDiv, fullPath);\n    } else {\n      const fileDiv = document.createElement('div');\n      fileDiv.className = 'file-item';\n      fileDiv.innerHTML = `<span>${getFileIcon(name)}</span><span>${name}</span>`;\n      fileDiv.addEventListener('click', ()=> bus.emit('file:open', { path: fullPath }));\n      container.appendChild(fileDiv);\n    }\n  });\n  highlightSelection();\n}\n\nfunction highlightSelection(){\n  const items = document.querySelectorAll('.file-item');\n  items.forEach(item=>{\n    item.classList.remove('active','modified');\n    const label = item.textContent.trim();\n    if (state.activeFile && state.activeFile.endsWith(label)) item.classList.add('active');\n    for (const [filePath, fileData] of state.openFiles){\n      if (filePath.endsWith(label) && fileData.modified){ item.classList.add('modified'); }\n    }\n  });\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-tabs",
      "description": "Tabs management",
      "path": "src/ui/tabs.js",
      "mode": "create_new",
      "content": "import { qs } from './dom.js';\nimport { state } from '../core/state.js';\nimport { bus } from '../core/eventBus.js';\nimport { getFileIcon } from '../utils/path.js';\n\nexport function initTabs(){ updateTabs(); }\n\nexport function updateTabs(){\n  const container = qs('#tabsContainer'); if (!container) return;\n  container.innerHTML = '';\n  for (const [filePath, fileData] of state.openFiles){\n    const tab = document.createElement('div');\n    tab.className = `tab ${filePath === state.activeFile ? 'active' : ''}`;\n    const fileName = filePath.split('/').pop();\n    const modifiedIndicator = fileData.modified ? ' ‚óè' : '';\n    tab.innerHTML = `<span>${getFileIcon(fileName)} ${fileName}${modifiedIndicator}</span><span class=\"tab-close\" title=\"Close\">√ó</span>`;\n    tab.addEventListener('click', (e)=>{\n      if (e.target.classList.contains('tab-close')){\n        e.stopPropagation(); closeFile(filePath);\n      } else {\n        switchToFile(filePath);\n      }\n    });\n    container.appendChild(tab);\n  }\n}\n\nexport function switchToFile(filePath){\n  state.activeFile = filePath;\n  updateTabs();\n  bus.emit('file:open', { path: filePath });\n}\n\nexport function closeFile(filePath){\n  const data = state.openFiles.get(filePath);\n  if (data?.modified){\n    const yes = confirm(`File ${filePath} has unsaved changes. Close anyway?`);\n    if (!yes) return;\n  }\n  state.openFiles.delete(filePath);\n  if (state.activeFile === filePath){\n    const remaining = Array.from(state.openFiles.keys());\n    if (remaining.length) switchToFile(remaining[remaining.length-1]); else {\n      state.activeFile = null; state.editor?.setModel(null);\n    }\n  }\n  updateTabs();\n  bus.emit('ui:fileTree:selection');\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-statusBar",
      "description": "Status bar helper",
      "path": "src/ui/statusBar.js",
      "mode": "create_new",
      "content": "import { qs } from './dom.js';\nexport function setStatus(message){\n  const el = qs('#statusMessage'); if (!el) return;\n  el.textContent = message;\n  setTimeout(()=>{ el.textContent = 'Ready'; }, 3000);\n}\n"
    },
    {
      "op": "write_file",
      "id": "ui-modals",
      "description": "Modal open/close handling",
      "path": "src/ui/modals.js",
      "mode": "create_new",
      "content": "import { bus } from '../core/eventBus.js';\nexport function initModals(){\n  bus.on('modal:open', ({ target })=> openModal(target));\n  bus.on('modal:close', ({ target })=> closeModal(target));\n}\nfunction openModal(sel){ const m = document.querySelector(sel); if (m) m.classList.remove('hidden'); }\nfunction closeModal(sel){ const m = document.querySelector(sel); if (m) m.classList.add('hidden'); }\n"
    },
    {
      "op": "write_file",
      "id": "editor-index",
      "description": "Editor initialization with Monaco and diff support",
      "path": "src/editor/index.js",
      "mode": "create_new",
      "content": "import { state } from '../core/state.js';\nimport { bus } from '../core/eventBus.js';\nimport { Logger } from '../core/logger.js';\nimport { getLanguageFromPath } from '../utils/path.js';\n\nexport function initEditor({ onCursorMove, onContentChange }){\n  state.editor = monaco.editor.create(document.getElementById('monaco-editor'), {\n    value: '', language: 'markdown', theme: 'vs-dark', automaticLayout: true,\n    minimap: { enabled: true }, scrollBeyondLastLine: false, fontSize: 14, lineNumbers: 'on', wordWrap: 'on', cursorBlinking: 'blink',\n    quickSuggestions: true, suggestOnTriggerCharacters: true, formatOnPaste: true, formatOnType: true\n  });\n  state.diffEditor = monaco.editor.createDiffEditor(document.getElementById('monaco-diff'), { theme: 'vs-dark', automaticLayout: true, readOnly: false });\n  state.editor.onDidChangeCursorPosition((e)=> onCursorMove?.(e.position));\n  state.editor.onDidChangeModelContent(()=>{\n    if (state.activeFile) {\n      const fileData = state.openFiles.get(state.activeFile);\n      if (!fileData) return;\n      const current = state.editor.getValue();\n      fileData.content = current;\n      fileData.modified = current !== fileData.originalContent;\n      bus.emit('ui:tabs:update');\n      bus.emit('ui:fileTree:selection');\n      onContentChange?.();\n    }\n  });\n  bus.on('ui:tabs:update', ()=>{\n    // No-op placeholder for any editor-specific tab updates\n  });\n}\n\nexport function loadFileInEditor(filePath){\n  const fileData = state.openFiles.get(filePath);\n  if (!fileData) return;\n  const language = getLanguageFromPath(filePath);\n  document.getElementById('monaco-diff').classList.add('hidden');\n  document.getElementById('monaco-editor').classList.remove('hidden');\n  const model = monaco.editor.createModel(fileData.content, language);\n  state.editor.setModel(model);\n}\n\nexport function showDiff(){\n  if (!state.activeFile) return;\n  const data = state.openFiles.get(state.activeFile); if (!data) return;\n  document.getElementById('monaco-editor').classList.add('hidden');\n  document.getElementById('monaco-diff').classList.remove('hidden');\n  const lang = getLanguageFromPath(state.activeFile);\n  const originalModel = monaco.editor.createModel(data.originalContent, lang);\n  const modifiedModel = monaco.editor.createModel(data.content, lang);\n  state.diffEditor.setModel({ original: originalModel, modified: modifiedModel });\n}\n\nexport function toggleMinimap(){\n  const minimap = state.editor.getOption(monaco.editor.EditorOption.minimap);\n  state.editor.updateOptions({ minimap: { enabled: !minimap.enabled } });\n}\n\nexport function getEditorValue(){ return state.editor ? state.editor.getValue() : ''; }\n"
    },
    {
      "op": "write_file",
      "id": "terminal-index",
      "description": "Terminal logic, execution dispatcher, output helpers",
      "path": "src/terminal/index.js",
      "mode": "create_new",
      "content": "import { qs } from '../ui/dom.js';\nimport { state } from '../core/state.js';\nimport * as API from '../services/api.js';\n\nexport function initTerminal(){\n  qs('#terminalInput')?.addEventListener('keypress', (e)=>{\n    if (e.key === 'Enter'){\n      executeTerminalCommand(e.target.value);\n      e.target.value='';\n    }\n  });\n}\n\nexport function toggleTerminalPanel(){\n  const panel = qs('#bottomPanel');\n  panel?.classList.toggle('hidden');\n}\n\nexport function executeTerminalCommand(command){\n  addToTerminal(`$ ${command}`);\n  if (command === 'help'){ addToTerminal('Available: ls, pwd, whoami, node --version, npm --version, git, docker, npm, help, clear'); return; }\n  if (command === 'clear'){\n    const t = qs('#terminal');\n    t.innerHTML = `<div>üöÄ Advanced Web IDE Pro - Terminal</div><div>Connected to: <span id=\"terminalHost\">${qs('#terminalHost').textContent}</span></div><div>Type 'help' for available commands</div>`;\n    return;\n  }\n  if (command.startsWith('git ')) { API.executeGitCommand(command); return; }\n  API.executeRemoteCommand(command).then(result=> addToTerminal(result.output));\n}\n\nexport function addToTerminal(text){\n  const terminal = qs('#terminal');\n  const div = document.createElement('div'); div.textContent = text;\n  terminal.appendChild(div); terminal.scrollTop = terminal.scrollHeight;\n}\n\nexport function addToOutput(text){\n  const output = qs('#outputContent');\n  const div = document.createElement('div'); div.textContent = `[${new Date().toLocaleTimeString()}] ${text}`;\n  output.appendChild(div); output.scrollTop = output.scrollHeight;\n}\n\nexport function addToDockerLogs(text){\n  const logs = qs('#dockerLogs');\n  const div = document.createElement('div'); div.textContent = `[${new Date().toLocaleTimeString()}] ${text}`;\n  logs.appendChild(div); logs.scrollTop = logs.scrollHeight;\n}\n"
    },
    {
      "op": "write_file",
      "id": "svc-api",
      "description": "Simulated API for SSH, Git, Remote commands. Emits events and updates state.",
      "path": "src/services/api.js",
      "mode": "create_new",
      "content": "import { state } from '../core/state.js';\nimport { bus } from '../core/eventBus.js';\nimport { showNotification } from '../ui/notifications.js';\nimport { updateConnectionStatus, updateWorkspaceIndicator } from '../ui/panels.js';\nimport { remoteTree } from '../data/sampleFileTree.js';\nimport { addToTerminal } from '../terminal/index.js';\n\nexport async function connectSSH(config){\n  showNotification('üîó Connecting to SSH...', 'info');\n  return new Promise(resolve=>{\n    setTimeout(()=>{\n      state.isConnected = true; state.currentWorkspace = 'remote';\n      updateConnectionStatus(true, config.host);\n      updateWorkspaceIndicator('Remote: ' + config.host);\n      bus.emit('fileTree:replace', { tree: remoteTree });\n      document.getElementById('connectBtn')?.classList.add('hidden');\n      document.getElementById('disconnectBtn')?.classList.remove('hidden');\n      document.getElementById('terminalHost').textContent = config.host;\n      addToTerminal(`Connected to ${config.host}`);\n      showNotification(`‚úÖ Connected to ${config.host}`, 'success');\n      bus.emit('workspace:changed', { connected: true, host: config.host });\n      resolve({ success: true, host: config.host });\n    }, 800);\n  });\n}\n\nexport async function disconnectSSH(){\n  return new Promise(resolve=>{\n    setTimeout(()=>{\n      state.isConnected = false; state.currentWorkspace = 'local';\n      updateConnectionStatus(false);\n      updateWorkspaceIndicator('Local');\n      bus.emit('fileTree:replace', { tree: {} }); // UI will refresh, next set handled by consumer\n      document.getElementById('connectBtn')?.classList.remove('hidden');\n      document.getElementById('disconnectBtn')?.classList.add('hidden');\n      document.getElementById('terminalHost').textContent = 'localhost';\n      addToTerminal('Disconnected from remote server');\n      showNotification('üîå Disconnected from SSH', 'info');\n      bus.emit('workspace:changed', { connected: false, host: 'localhost' });\n      resolve({ success: true });\n    }, 300);\n  });\n}\n\nexport async function executeGitCommand(command){\n  return new Promise(resolve=>{\n    setTimeout(()=>{\n      addToTerminal(`$ ${command}`);\n      const output = simulateGitOutput(command);\n      addToTerminal(output);\n      resolve({ output, success: true });\n    }, 400);\n  });\n}\n\nexport async function executeRemoteCommand(command){\n  return new Promise(resolve=>{\n    setTimeout(()=>{ resolve({ output: simulateCommandOutput(command), exitCode: 0 }); }, 300);\n  });\n}\n\nexport function executeGitHubAction(){\n  const token = document.getElementById('githubToken')?.value;\n  const repoUrl = document.getElementById('repoUrl')?.value;\n  if (!token || !repoUrl){ showNotification('‚ö†Ô∏è Please fill in all fields', 'warning'); return; }\n  showNotification('üêô Executing GitHub action...', 'info');\n  setTimeout(()=>{ showNotification('‚úÖ GitHub integration successful', 'success'); document.querySelector('#githubModal')?.classList.add('hidden'); }, 800);\n}\n\nfunction simulateCommandOutput(cmd){\n  const outputs = {\n    'ls': 'total 8\\ndrwxr-xr-x  3 user user 4096 projects\\n-rw-r--r--  1 user user  220 .bashrc',\n    'pwd': state.currentWorkspace === 'remote' ? '/home/developer' : '/Users/developer',\n    'whoami': 'developer',\n    'node --version': 'v18.17.1',\n    'npm --version': '9.8.1'\n  };\n  return outputs[cmd] || `Command executed: ${cmd}`;\n}\n\nfunction simulateGitOutput(command){\n  const outputs = {\n    'git status': 'On branch main\\nYour branch is up to date with \\\"origin/main\\\".\\nNothing to commit, working tree clean',\n    'git pull origin main': 'Already up to date.',\n    'git push origin main': 'Everything up-to-date',\n    'git add .': 'Files staged for commit',\n    'git fetch': 'Already up to date.'\n  };\n  for (const [key,val] of Object.entries(outputs)) if (command.startsWith(key)) return val;\n  return 'Git command executed successfully';\n}\n"
    },
    {
      "op": "write_file",
      "id": "svc-git",
      "description": "Git service wrapping API and UI interactions",
      "path": "src/services/git.js",
      "mode": "create_new",
      "content": "import * as API from './api.js';\nimport { showNotification } from '../ui/notifications.js';\n\nexport async function pull(){ await API.executeGitCommand('git pull origin main'); }\nexport async function fetch(){ await API.executeGitCommand('git fetch'); }\nexport async function stash(){ await API.executeGitCommand('git stash'); }\nexport async function createBranch(){\n  const branch = prompt('Enter new branch name:');\n  if (branch){ await API.executeGitCommand(`git checkout -b ${branch}`); }\n}\nexport async function quickCommitPush(message){\n  if (!message){ showNotification('‚ö†Ô∏è Please enter a commit message', 'warning'); return; }\n  showNotification('üí´ Executing quick commit & push...', 'info');\n  await API.executeGitCommand('git add .');\n  await API.executeGitCommand(`git commit -m \"${message.replaceAll('\"','\\\\\\\"')}\"`);\n  await API.executeGitCommand('git push origin main');\n  const el = document.getElementById('commitMessage'); if (el) el.value='';\n}\n"
    },
    {
      "op": "write_file",
      "id": "svc-docker",
      "description": "Docker service to write logs and switch panels",
      "path": "src/services/docker.js",
      "mode": "create_new",
      "content": "import { addToDockerLogs } from '../terminal/index.js';\nimport { bus } from '../core/eventBus.js';\n\nexport function build(){ bus.emit('panel:show', { name: 'docker' }); addToDockerLogs('üê≥ Building Docker image...'); }\nexport function run(){ bus.emit('panel:show', { name: 'docker' }); addToDockerLogs('üê≥ Starting containers...'); }\nexport function ps(){ addToDockerLogs('üìã Listing containers...'); }\nexport function stopAll(){ addToDockerLogs('üõë Stopping containers...'); }\n"
    },
    {
      "op": "write_file",
      "id": "svc-db",
      "description": "Database service handlers",
      "path": "src/services/db.js",
      "mode": "create_new",
      "content": "import { showNotification } from '../ui/notifications.js';\n\nexport function testConnection(){ showNotification('üîó Testing database connection...', 'info'); setTimeout(()=> showNotification('‚úÖ Connection successful', 'success'), 800); }\nexport function saveConnection(){ showNotification('‚úÖ Database connection saved', 'success'); document.querySelector('#databaseModal')?.classList.add('hidden'); }\nexport function connect(name){ showNotification(`üîó Connecting to ${name}...`, 'info'); }\nexport function executeQuery(){\n  const q = document.getElementById('sqlQuery')?.value || '';\n  if (!q.trim()){ showNotification('‚ö†Ô∏è Please enter a SQL query', 'warning'); return; }\n  showNotification('‚ö° Executing query...', 'info');\n}\nexport function clearQuery(){ const el = document.getElementById('sqlQuery'); if (el) el.value=''; }\n"
    },
    {
      "op": "write_file",
      "id": "svc-ssh",
      "description": "SSH connect/disconnect handlers wrapping API",
      "path": "src/services/ssh.js",
      "mode": "create_new",
      "content": "import * as API from './api.js';\nimport { showNotification } from '../ui/notifications.js';\n\nexport async function connect(){\n  const config = {\n    host: document.getElementById('sshHost')?.value,\n    port: Number(document.getElementById('sshPort')?.value||22),\n    username: document.getElementById('sshUsername')?.value,\n    authMethod: document.getElementById('authMethod')?.value,\n    password: document.getElementById('sshPassword')?.value,\n    remotePath: document.getElementById('remotePath')?.value\n  };\n  if (!config.host || !config.username){ showNotification('‚ùå Please fill in required fields', 'error'); return; }\n  try{ await API.connectSSH(config); }catch(e){ showNotification('‚ùå Connection failed: ' + (e?.message||e), 'error'); }\n}\n\nexport async function disconnect(){ await API.disconnectSSH(); }\n"
    },
    {
      "op": "write_file",
      "id": "svc-search",
      "description": "Search service (simulated)",
      "path": "src/services/search.js",
      "mode": "create_new",
      "content": "import { qs } from '../ui/dom.js';\nimport { bus } from '../core/eventBus.js';\n\nexport function searchInFiles(query){\n  const results = qs('#searchResults'); if (!results) return;\n  if (!query){ results.innerHTML=''; return; }\n  results.innerHTML = `<div class=\"pad-8 muted\">Searching for \\\"${query.replaceAll('\"','&quot;')}\\\"...</div>`;\n  setTimeout(()=>{\n    results.innerHTML = `<div class=\"pad-8\" style=\"cursor:pointer;font-size:11px;\" data-open=\"README.md\"><div style=\"font-weight:bold;\">README.md:5</div><div class=\"muted\">Advanced Web IDE Pro</div></div>`;\n    results.querySelector('[data-open]')?.addEventListener('click', (e)=>{\n      const path = e.currentTarget.getAttribute('data-open');\n      bus.emit('file:open', { path });\n    });\n  }, 300);\n}\n"
    },
    {
      "op": "write_file",
      "id": "utils-path",
      "description": "Path utils: language detect, icon, in-memory file access",
      "path": "src/utils/path.js",
      "mode": "create_new",
      "content": "import { state } from '../core/state.js';\n\nexport function getLanguageFromPath(filePath){\n  const ext = filePath.split('.').pop()?.toLowerCase();\n  const map = { js:'javascript', jsx:'javascript', ts:'typescript', tsx:'typescript', html:'html', css:'css', json:'json', md:'markdown', php:'php', py:'python' };\n  return map[ext] || 'plaintext';\n}\n\nexport function getFileFromPath(path){\n  const parts = path.split('/').filter(Boolean);\n  let current = state.fileTree;\n  for (const part of parts){\n    if (!current[part]) return null;\n    if (current[part].type === 'folder') current = current[part].children; else return current[part];\n  }\n  return current;\n}\n\nexport function getFileIcon(fileName){\n  const ext = fileName.split('.').pop()?.toLowerCase();\n  const icons = { js:'üìÑ', jsx:'‚öõÔ∏è', ts:'üìò', tsx:'‚öõÔ∏è', html:'üåê', css:'üé®', json:'üìã', md:'üìù', php:'üêò', py:'üêç' };\n  return icons[ext] || 'üìÑ';\n}\n"
    },
    {
      "op": "write_file",
      "id": "utils-time",
      "description": "Time utilities (placeholder for future use)",
      "path": "src/utils/time.js",
      "mode": "create_new",
      "content": "export const now = () => new Date();\nexport const timeStr = () => new Date().toLocaleTimeString();\n"
    },
    {
      "op": "write_file",
      "id": "data-sampleTree",
      "description": "Local and Remote sample file trees",
      "path": "src/data/sampleFileTree.js",
      "mode": "create_new",
      "content": "export const localTree = {\n  'src': { type:'folder', children: {\n    'components': { type:'folder', children: {\n      'App.tsx': { type:'file', content: \"import React from 'react';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Advanced Web IDE Pro</h1>\\n      <p>A comprehensive development environment</p>\\n    </div>\\n  );\\n}\\n\\nexport default App;\" },\n      'Header.tsx': { type:'file', content: \"import React from 'react';\\n\\nconst Header: React.FC = () => {\\n  return (\\n    <header className=\\\"header\\\">\\n      <h1>My Application</h1>\\n      <nav>\\n        <a href=\\\"/\\\">Home</a>\\n        <a href=\\\"/about\\\">About</a>\\n      </nav>\\n    </header>\\n  );\\n};\\n\\nexport default Header;\" }\n    }},\n    'utils': { type:'folder', children: {\n      'helpers.ts': { type:'file', content: \"export const formatDate = (date: Date): string => {\\n  return new Intl.DateTimeFormat('en-US').format(date);\\n};\\n\\nexport const debounce = <T extends (...args: any[]) => any>(\\n  func: T,\\n  wait: number\\n): ((...args: Parameters<T>) => void) => {\\n  let timeout: any;\\n  return (...args: Parameters<T>) => {\\n    clearTimeout(timeout);\\n    timeout = setTimeout(() => func(...args), wait);\\n  };\\n};\" }\n    }},\n    'index.tsx': { type:'file', content: \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './components/App';\\nimport './styles.css';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\n\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\" },\n    'styles.css': { type:'file', content: \"/* Global styles */\\nbody {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\\n  background-color: #f5f5f5;\\n}\\n\\n.App {\\n  text-align: center;\\n  padding: 40px 20px;\\n}\\n\\nh1 {\\n  color: #333;\\n  margin-bottom: 20px;\\n}\" }\n  }},\n  'package.json': { type:'file', content: `{\"name\":\"advanced-web-ide-demo\",\"version\":\"1.0.0\",\"description\":\"Demo project for Advanced Web IDE Pro\",\"main\":\"src/index.tsx\",\"dependencies\":{\"react\":\"^18.2.0\",\"react-dom\":\"^18.2.0\",\"typescript\":\"^4.9.0\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test\"}}` },\n  'README.md': { type:'file', content: \"# Advanced Web IDE Pro\\n\\nA comprehensive, cloud-based integrated development environment with advanced features for modern web development.\\n\\n## Features\\n\\n- **Multi-file Editor**: Monaco Editor with IntelliSense\\n- **SSH Connectivity**: Connect to remote servers\\n- **Git Integration**: Complete version control\\n- **Docker Support**: Container management\\n- **Database Browser**: Multi-database support\\n- **Built-in Terminal**: Execute commands\\n\\n## Quick Start\\n\\n1. Connect to a remote server via SSH\\n2. Clone a repository from GitHub\\n3. Start editing files with full IDE features\\n4. Build and deploy your application\\n\\n## Keyboard Shortcuts\\n\\n- Ctrl+S - Save file\\n- Ctrl+N - New file\\n- Ctrl+` - Toggle terminal\\n- Ctrl+Shift+F - Global search\\n\\nEnjoy coding! üöÄ\" }\n};\n\nexport const remoteTree = {\n  'var': { type:'folder', children: { 'www': { type:'folder', children: { 'html': { type:'folder', children: {\n    'index.php': { type:'file', content: \"<?php\\necho 'Hello from remote server!';\\nphpinfo();\\n?>\" },\n    'config.php': { type:'file', content: \"<?php\\ndefine('DB_HOST','localhost');\\ndefine('DB_NAME','production_db');\\n?>\" }\n  }}}}}},\n  'home': { type:'folder', children: { 'developer': { type:'folder', children: { 'projects': { type:'folder', children: {\n    'my-app': { type:'folder', children: { 'app.js': { type:'file', content: \"const express = require('express');\\nconst app = express();\\napp.get('/', (req, res) => {\\n  res.send('Hello from remote server!');\\n});\\napp.listen(3000);\" } } }\n  }}}}}\n};\n"
    },
    {
      "op": "write_file",
      "id": "readme",
      "description": "Project README with run instructions",
      "path": "README.md",
      "mode": "create_new",
      "content": "# Advanced Web IDE Pro (Modular)\n\nThis is a modular, browser-only implementation of the original single-file IDE. It separates concerns across ES modules and CSS files, adds structured logging, and centralizes state management.\n\nHow to run:\n- No build step required. Open index.html in a modern browser (served via a local web server for best results to avoid CORS on some browsers).\n- Monaco Editor is loaded via CDN and AMD loader.\n\nKey folders:\n- assets/css: Base and IDE styles\n- src/core: Logger, EventBus, State\n- src/ui: DOM helpers, notifications, panels, fileTree, tabs, statusBar, modals\n- src/editor: Monaco editor wiring\n- src/terminal: Terminal utilities and dispatcher\n- src/services: API simulations (SSH, Git, Docker, DB, Search)\n- src/utils: Generic utilities (path, time)\n- src/data: Sample local/remote file trees\n\nLogging:\n- Change window.__LOG_LEVEL to one of: debug, info, warn, error to control verbosity.\n\nNotes:\n- This UI uses in-memory file trees for demo purposes.\n- All network/CLI operations are simulated. Replace services/api.js with real backends as needed.\n"
    }
  ]
}