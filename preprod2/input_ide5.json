{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/code-change-plan.schema.json",
  "title": "CodeChangePlan",
  "type": "object",
  "required": ["version", "changes"],
  "version": "1.0",
  "backup": true,
  "changes": [
    {
      "id": "fix-file-open-handler-reference-error",
      "description": "Prevent ReferenceError by renaming 'file' variable and adding robust null/type checks when opening files. Improves logging and user feedback.",
      "op": "patch_text",
      "path": "src/main.js",
      "patches": [
        {
          "type": "replace_regex",
          "match": "bus\\.on\\('file:open',\\s*\\(\\{\\s*path\\s*\\}\\)\\s*=>\\s*\\{[\\s\\S]*?\\}\\);",
          "replacement": "bus.on('file:open', ({ path }) => {\n  try {\n    const fileNode = getFileFromPath(path);\n    if (!fileNode || fileNode.type !== 'file') {\n      Logger.warn('file:open: not a file or not found', { path, node: fileNode });\n      showNotification(`⚠️ File not found: ${path}`, 'warning');\n      return;\n    }\n    if (!state.openFiles.has(path)) {\n      const content = fileNode.content ?? '';\n      state.openFiles.set(path, { content, originalContent: content, modified: false });\n    }\n    state.activeFile = path;\n    updateTabs();\n    if (state.editor) {\n      loadFileInEditor(path);\n    }\n    bus.emit('ui:fileTree:selection');\n    setStatus(`📖 Opened ${path}`);\n    const lang = (getLanguageFromPath(path) || 'plaintext').toUpperCase();\n    const lm = qs('#languageMode'); if (lm) lm.textContent = lang;\n  } catch (e) {\n    Logger.error('file:open handler error', e);\n    showNotification('❌ Failed to open file', 'error');\n  }\n});"
        }
      ]
    },
    {
      "id": "init-auth-password-visibility",
      "description": "Initialize password field visibility based on current auth method at startup for better UX.",
      "op": "patch_text",
      "path": "src/main.js",
      "patches": [
        {
          "type": "insert_after",
          "anchor": "qs('#authMethod')?.addEventListener('change', (e) => {",
          "replacement": "  // Initialize visibility immediately on load as well\n  { const sel = qs('#authMethod'); const group = qs('#passwordGroup'); if (sel && group) group.classList.toggle('hidden', sel.value !== 'password'); }",
          "newline": true
        }
      ]
    }
  ]
}