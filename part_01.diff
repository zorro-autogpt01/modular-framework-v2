diff --git a/modular-framework/modules/llm-tester/src/routes/admin.js b/modular-framework/modules/llm-tester/src/routes/admin.js
index 70b39d9..0f081f5 100644
--- a/modular-framework/modules/llm-tester/src/routes/admin.js
+++ b/modular-framework/modules/llm-tester/src/routes/admin.js
@@ -1,19 +1,20 @@
 import { Router } from "express";
 import { Storage } from "../storage.js";
+import { checkGatewayConnectivity, checkRagConnectivity } from "../connectivity.js";
 
 import { logInfo, logWarn } from "../logger.js";
 
 const router = Router();
 
 router.post("/webhooks", (req, res) => {
-  const rid = req.id; logInfo('LT admin webhook create <-', { rid, ip: req.ip, body: { event, url: url ? url.toString() : null } });
-
 const { event, url, secret } = req.body || {};
+  const rid = req.id; logInfo('LT admin webhook create <-', { rid, ip: req.ip, body: { event, url: url ? url.toString() : null } });
 if (!event || !url) return res.status(400).json({ error: "event_and_url_required" });
 const hook = Storage.addWebhook({ event, url, secret });
 logInfo('LT admin webhook create ->', { rid, id: hook.id });
 
 res.json({ ok: true, id: hook.id });
 });
 
 // Config (RAG + Chat Replay)
 router.get("/config", (req, res) => {
 const rid = req.id; logInfo('LT admin config get', { rid, ip: req.ip });
 res.json(Storage.getConfig());
 });
 
 router.put("/config", (req, res) => {
 const rid = req.id; const { ragEnabled, chatReplayEnabled } = req.body || {};
 logInfo('LT admin config put <-', { rid, ip: req.ip, ragEnabled, chatReplayEnabled });
 if (ragEnabled != null && typeof ragEnabled !== "boolean")
 return res.status(400).json({ error: "invalid_value", message: "ragEnabled must be boolean" });
 if (chatReplayEnabled != null && typeof chatReplayEnabled !== "boolean")
 return res.status(400).json({ error: "invalid_value", message: "chatReplayEnabled must be boolean" });
 const saved = Storage.saveConfig({ ragEnabled, chatReplayEnabled });
 logInfo('LT admin config put ->', { rid, saved });
 res.json({ ok: true, config: saved });
 });
 
+// Connectivity checks for LLM Gateway and RAG
+router.get("/connectivity", async (req, res) => {
+  const rid = req.id;
+  const gBase = (req.query.g_base || "/llm-gateway/api").toString();
+  const gModel = req.query.g_model ? req.query.g_model.to() : undefined;
+  const doChat = String(req.query.g_chat || (gModel ? "1" : "0")).toLowerCase() === "1";
+  const doRag = String(req.query.rag || "1").toLowerCase() !== "0";
+  logInfo("LT admin connectivity <-", { rid, g_base: gBase, g_model: gModel, doChat, doRag });
+
+  const out = { ok: true, gateway: null, rag: null };
+  try {
+    out.gateway = await checkGatewayConnectivity({ baseUrl: gBase, model: doChat ? gModel : undefined });
+  } catch (e) {
+    out.gateway = { ok: false, error: e.message || String(e) };
+    out.ok = false;
+  }
+  if (doRag) {
+    try {
+      out.rag = await checkRagConnectivity();
+    } catch (e) {
+      out.rag = { ok: false, error: e.message || String(e) };
+      out.ok = false;
+    }
+  }
+  logInfo("LT admin connectivity ->", { rid, ok: out.ok, gateway_ok: out.gateway?.ok, rag_ok: out.rag?.ok });
+  res.json(out);
+});
+
 export default router;
